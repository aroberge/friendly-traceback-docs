
Friendly tracebacks - in English
======================================

Friendly-traceback aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Ideally, an example of each case handled by friendly-traceback
should be included here.

.. note::

     The content of this page is generated by running
     C:\Users\andre\github\friendly-traceback\tests\trb_english.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.2.9a
Python version: 3.9.0



ArithmeticError
---------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_arithmetic_error.py", line 9, in test_arithmetic_error
        raise ArithmeticError('error')
    ArithmeticError: error
    
    `ArithmeticError` is the base class for those built-in exceptions
    that are raised for various arithmetic errors.
    It is unusual that you are seeing this exception;
    normally, a more specific exception should have been raised.
    
    Exception raised on line 9 of file TESTS:\runtime\test_arithmetic_error.py.
    
        7:         # Usually, a subclass such as ZeroDivisionError, etc., would
        8:         # likely be raised.
    --> 9:         raise ArithmeticError('error')
       10:     except Exception as e:


AttributeError - class attribute
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 36, in test_generic
        a.x  # Testing instance
    AttributeError: 'A' object has no attribute 'x'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        The object `a` has no attribute named `x`.
        
    Exception raised on line 36 of file TESTS:\runtime\test_attribute_error.py.
    
       34:     try:
       35:         a = A()
    -->36:         a.x  # Testing instance
       37:     except Exception as e:

            a: <A object> from test_attribute_error.test_generic
        


AttributeError - typo in object attribute
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 52, in test_object_attribute_typo
        a.appendh(4)
    AttributeError: 'list' object has no attribute 'appendh'
    
        Did you mean `append`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        Perhaps you meant to write `a.append` instead of `a.appendh`
        
    Exception raised on line 52 of file TESTS:\runtime\test_attribute_error.py.
    
       50:     try:
       51:         a = [1, 2, 3]
    -->52:         a.appendh(4)
                   ^^^^^^^^^
       53:     except Exception as e:

            a: [1, 2, 3]
        


AttributeError - using builtin
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 68, in test_use_builtin
        a.length()
    AttributeError: 'list' object has no attribute 'length'
    
        Did you mean `len(a)`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        The object `a` has no attribute named `length`.
        Perhaps you can use the Python builtin function `len` instead:
        `len(a)`.
    Exception raised on line 68 of file TESTS:\runtime\test_attribute_error.py.
    
       66:     try:
       67:         a = [1, 2, 3]
    -->68:         a.length()
                   ^^^^^^^^
       69:     except Exception as e:

            a: [1, 2, 3]
        


AttributeError - use synonym
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 84, in test_use_synonym
        a.add(4)
    AttributeError: 'list' object has no attribute 'add'
    
        Did you mean `append`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        The object `a` has no attribute named `add`.
        However, `a` has the following attributes with similar meanings:
        `append, extend, insert`.
        
    Exception raised on line 84 of file TESTS:\runtime\test_attribute_error.py.
    
       82:     try:
       83:         a = [1, 2, 3]
    -->84:         a.add(4)
                   ^^^^^
       85:     except Exception as e:

            a: [1, 2, 3]
        


AttributeError - typo in module attribute
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 113, in test_module_attribute_typo
        math.cost
    AttributeError: module 'math' has no attribute 'cost'
    
        Did you mean one of the following: `cos, cosh, acos`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        Instead of writing `math.cost`, perhaps you meant to write one of 
        the following names which are attributes of module `math`:
        `cos, cosh, acos`
        
    Exception raised on line 113 of file TESTS:\runtime\test_attribute_error.py.
    
       111: 
       112:     try:
    -->113:         math.cost
       114:     except Exception as e:

            math: <module math (builtin)>
        


AttributeError - shadowning stdlib module
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 134, in test_shadow_stdlib_module
        turtle.Pen
    AttributeError: module 'turtle' has no attribute 'Pen'
    
        Did you give your program the same name as a Python module?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        You imported a module named `turtle` from `TESTS:\turtle.py`.
        There is also a module named `turtle` in Python's standard library.
        Perhaps you need to rename your module.
        
    Exception raised on line 134 of file TESTS:\runtime\test_attribute_error.py.
    
       132: 
       133:     try:
    -->134:         turtle.Pen
       135:     except Exception as e:

            turtle: <module turtle> from TESTS:\turtle.py
        


AttributeError - using . instead of ,
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 171, in test_perhaps_comma
        a = [abcd
    AttributeError: 'str' object has no attribute 'defg'
    
        Did you mean to separate object names by a comma?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        `defg` is not an attribute of `abcd`.
        However, both `abcd` and `defg` are known objects.
        Perhaps you wrote a period to separate these two objects, 
        instead of using a comma.
        
    Exception raised on line 171 of file TESTS:\runtime\test_attribute_error.py.
    
       169:     # fmt: off
       170:     try:
    -->171:         a = [abcd
       172:         .defg]

            abcd: 'hello'
            defg: 'world'
        


AttributeError - builtin function with no attribute
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 188, in test_builtin_function
        len.text
    AttributeError: 'builtin_function_or_method' object has no attribute 'text'
    
        Did you mean `len(text)`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        `len` is a function. Perhaps you meant to write
        `len(text)`
        
    Exception raised on line 188 of file TESTS:\runtime\test_attribute_error.py.
    
       186:     text = 'Hello world!'
       187:     try:
    -->188:         len.text
       189:     except Exception as e:

            text: 'Hello world!'
        


AttributeError - builtin module with no file
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 205, in test_builtin_module_with_no_file
        sys.foo
    AttributeError: module 'sys' has no attribute 'foo'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        Python tells us that no object with name `foo` is
        found in module `sys`.
        
    Exception raised on line 205 of file TESTS:\runtime\test_attribute_error.py.
    
       203: 
       204:     try:
    -->205:         sys.foo
       206:     except Exception as e:

            sys: <module sys (builtin)>
        


FileNotFoundError
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 6, in test_file_not_found_error
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    A `FileNotFoundError` exception indicates that you
    are trying to open a file that cannot be found by Python.
    This could be because you misspelled the name of the file.
    
        In your program, the name of the
        file that cannot be found is `does_not_exist`.
        
    Exception raised on line 6 of file TESTS:\runtime\test_file_not_found_error.py.
    
       4: def test_file_not_found_error():
       5:     try:
    -->6:         open("does_not_exist")
       7:     except Exception as e:


ImportError
-----------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 6, in test_import_error
        from math import Pi
    ImportError: cannot import name 'Pi' from 'math' (unknown location)
    
        Did you mean `pi`?
        
    An `ImportError` exception indicates that a certain object could not
    be imported from a module or package. Most often, this is
    because the name of the object is not spelled correctly.
    
        Perhaps you meant to import `pi` (from `math`) instead of `Pi`
        
    Exception raised on line 6 of file TESTS:\runtime\test_import_error.py.
    
       4: def test_import_error():
       5:     try:
    -->6:         from math import Pi
       7:     except Exception as e:


KeyError
--------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 7, in test_key_error
        d["c"]
    KeyError: 'c'
    
    A `KeyError` is raised when a value is not found as a
    key in a Python dict.
    
        In your program, the key that cannot be found is `'c'`.
        
    Exception raised on line 7 of file TESTS:\runtime\test_key_error.py.
    
       5:     d = {"a": 1, "b": 2}
       6:     try:
    -->7:         d["c"]
       8:     except Exception as e:

            d: {'a': 1, 'b': 2}
        


LookupError
-----------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_lookup_error.py", line 10, in test_lookup_error
        raise LookupError("Fake message")
    LookupError: Fake message
    
    `LookupError` is the base class for the exceptions that are raised
    when a key or index used on a mapping or sequence is invalid.
    It can also be raised directly by codecs.lookup().
    
    Exception raised on line 10 of file TESTS:\runtime\test_lookup_error.py.
    
        8:         # other than possibly codecs.lookup(), which is why we raise
        9:         # it directly here for our example.
    -->10:         raise LookupError("Fake message")
       11:     except Exception as e:


IndexError - short tuple
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 8, in test_index_error1
        print(a[3], b[2])
    IndexError: tuple index out of range
    
    An `IndexError` occurs when you are try to get an item from a list,
    a tuple, or a similar object (sequence), by using an index which
    does not exists; typically, this is because the index you give
    is greater than the length of the sequence.
    Reminder: the first item of a sequence is at index 0.
    
    Exception raised on line 8 of file TESTS:\runtime\test_index_error.py.
    
        6:     b = [1, 2, 3]
        7:     try:
    --> 8:         print(a[3], b[2])
                         ^^^^
        9:     except Exception as e:

            a: (1, 2, 3)
        


IndexError - long list
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 22, in test_index_error2
        print(a[50], b[0])
    IndexError: list index out of range
    
    An `IndexError` occurs when you are try to get an item from a list,
    a tuple, or a similar object (sequence), by using an index which
    does not exists; typically, this is because the index you give
    is greater than the length of the sequence.
    Reminder: the first item of a sequence is at index 0.
    
    Exception raised on line 22 of file TESTS:\runtime\test_index_error.py.
    
       20:     b = tuple(range(50))
       21:     try:
    -->22:         print(a[50], b[0])
                         ^^^^^
       23:     except Exception as e:

            a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
        


ModuleNotFoundError
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 6, in test_module_not_found_error
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        Did you mean `tkinter`?
        
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
        The name of the module that could not be imported is `Tkinter`.
        `tkinter` is an existing module that has a similar name.
        
    Exception raised on line 6 of file TESTS:\runtime\test_module_not_found_error.py.
    
       4: def test_module_not_found_error():
       5:     try:
    -->6:         import Tkinter
       7:     except Exception as e:


NameError - 1
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 6, in test_name_error
        this = something
    NameError: name 'something' is not defined
    
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `something` is an unknown name.
        I have no additional information for you.
    Exception raised on line 6 of file TESTS:\runtime\test_name_error.py.
    
       4: def test_name_error():
       5:     try:
    -->6:         this = something
       7:     except Exception as e:


NameError - 2
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 20, in test_name_error2
        x = babs(-1)
    NameError: name 'babs' is not defined
    
        Did you mean `abs`?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `babs` is an unknown name.
        Instead of writing `babs`, perhaps you meant one of the following:
        *   Local scope: `nabs`
        *   Global scope: `fabs`
        *   Python builtins: `abs`
        
    Exception raised on line 20 of file TESTS:\runtime\test_name_error.py.
    
       18:     nabs = 1
       19:     try:
    -->20:         x = babs(-1)
       21:     except Exception as e:


NameError - 3
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 35, in test_name_error3
        y = x
    NameError: name 'x' is not defined
    
        Did you use a colon instead of an equal sign?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `x` is an unknown name.
        A type hint found for `x` in the global scope.
        Perhaps you had used a colon instead of an equal sign and written
        
            x : 3
        
        instead of
        
            x = 3
        
    Exception raised on line 35 of file TESTS:\runtime\test_name_error.py.
    
       33: def test_name_error3():
       34:     try:
    -->35:         y = x
       36:     except Exception as e:


NameError - 4
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 48, in test_name_error4
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined
    
        Did you mean `cos`?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `cost` is an unknown name.
        Instead of writing `cost`, perhaps you meant one of the following:
        *   Global scope: `cos`, `cosh`, `acos`
        
    Exception raised on line 48 of file TESTS:\runtime\test_name_error.py.
    
       46: def test_name_error4():
       47:     try:
    -->48:         cost  # wrote from math import * above
       49:     except Exception as e:


OverflowError
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 6, in test_overflow_error
        2.0 ** 1600
    OverflowError: (34, 'Result too large')
    
    An `OverflowError` is raised when the result of an arithmetic operation
    is too large to be handled by the computer's processor.
    
    Exception raised on line 6 of file TESTS:\runtime\test_overflow_error.py.
    
       4: def test_overflow_error():
       5:     try:
    -->6:         2.0 ** 1600
       7:     except Exception as e:


RecursionError
--------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_recursion_error.py", line 8, in test_function_recursion_error
        a()
    
           ... More lines not shown. ...
    
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
    RecursionError: maximum recursion depth exceeded
    
    A `RecursionError` is raised when a function calls itself,
    directly or indirectly, too many times.
    It almost always indicates that you made an error in your code
    and that your program would never stop.
    
    Execution stopped on line 8 of file TESTS:\runtime\test_recursion_error.py.
    
        6:         return a()
        7:     try:
    --> 8:         a()
        9:     except Exception as e:

            a: <function a> from test_function_recursion_error
        
    Exception raised on line 6 of file TESTS:\runtime\test_recursion_error.py.
    
       4: def test_function_recursion_error():
       5:     def a():
    -->6:         return a()
                         ^^^
       7:     try:

            a: <function a> from test_function_recursion_error
        


TypeError - 1: concatenate two different types
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 36, in test_type_error1
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to concatenate (add) two different types of objects:
        a `tuple` and a `list`
        
    Exception raised on line 36 of file TESTS:\runtime\test_type_error.py.
    
       34:         a_tuple = (1, 2, 3)
       35:         a_list = [1, 2, 3]
    -->36:         result = a_tuple + a_list
                            ^^^^^^^^^^^^^^^^
       37:     except Exception as e:

            a_tuple: (1, 2, 3)
            a_list: [1, 2, 3]
        


TypeError - 2: unsupported operand type(s) for +=
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 66, in test_type_error2
        one += two
    TypeError: unsupported operand type(s) for +=: 'int' and 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to add two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 66 of file TESTS:\runtime\test_type_error.py.
    
       64:         one = 1
       65:         two = "two"
    -->66:         one += two
       67:     except Exception as e:

            one: 1
            two: 'two'
        


TypeError - 3: unsupported operand type(s) for -=
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 94, in test_type_error3
        b -= a
    TypeError: unsupported operand type(s) for -=: 'list' and 'tuple'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to subtract two incompatible types of objects:
        a `list` and a `tuple`
        
    Exception raised on line 94 of file TESTS:\runtime\test_type_error.py.
    
       92:         a = (1, 2)
       93:         b = [3, 4]
    -->94:         b -= a
       95:     except Exception as e:

            b: [3, 4]
            a: (1, 2)
        


TypeError - 4: unsupported operand type(s) for ``*=``
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 122, in test_type_error4
        b *= a
    TypeError: unsupported operand type(s) for *=: 'set' and 'complex'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to multiply two incompatible types of objects:
        a `set` and a complex number
        
    Exception raised on line 122 of file TESTS:\runtime\test_type_error.py.
    
       120:         a = 1j
       121:         b = {2, 3}
    -->122:         b *= a
       123:     except Exception as e:

            b: {2, 3}
            a: 1j
        


TypeError - 5: unsupported operand type(s) for //=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 174, in test_type_error5
        b //= a
    TypeError: unsupported operand type(s) for //=: 'float' and 'dict'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to divide two incompatible types of objects:
        a number (`float`) and a dictionary (`dict`)
        
    Exception raised on line 174 of file TESTS:\runtime\test_type_error.py.
    
       172:         a = {1: 1, 2: 2}
       173:         b = 3.1416
    -->174:         b //= a
       175:     except Exception as e:

            b: 3.1416
            a: {1: 1, 2: 2}
        


TypeError - 6: unsupported operand type(s) for &=
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 202, in test_type_error6
        b &= a
    TypeError: unsupported operand type(s) for &=: 'int' and 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to perform the bitwise operation &=
        on two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 202 of file TESTS:\runtime\test_type_error.py.
    
       200:         a = "a"
       201:         b = 2
    -->202:         b &= a
       203:     except Exception as e:

            b: 2
            a: 'a'
        


TypeError - 7: unsupported operand type(s) for ``**=``
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 230, in test_type_error7
        a **= b
    TypeError: unsupported operand type(s) for ** or pow(): 'dict' and 'float'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to exponentiate (raise to a power)
        using two incompatible types of objects:
        a dictionary (`dict`) and a number (`float`)
        
    Exception raised on line 230 of file TESTS:\runtime\test_type_error.py.
    
       228:         a = {1: 1, 2: 2}
       229:         b = 3.1416
    -->230:         a **= b
       231:     except Exception as e:

            a: {1: 1, 2: 2}
            b: 3.1416
        


TypeError - 8: unsupported operand type(s) for >>=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 258, in test_type_error8
        a >>= b
    TypeError: unsupported operand type(s) for >>=: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to perform the bit shifting operation >>=
        on two incompatible types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 258 of file TESTS:\runtime\test_type_error.py.
    
       256:         a = "a"
       257:         b = 42
    -->258:         a >>= b
       259:     except Exception as e:

            a: 'a'
            b: 42
        


TypeError - 9: unsupported operand type(s) for @=
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 286, in test_type_error9
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to use the operator @=
        using two incompatible types of objects:
        a string (`str`) and an integer (`int`).
        This operator is normally used only
        for multiplication of matrices.
        
    Exception raised on line 286 of file TESTS:\runtime\test_type_error.py.
    
       284:         a = "a"
       285:         b = 2
    -->286:         a @= b
       287:     except Exception as e:

            a: 'a'
            b: 2
        


TypeError - 10: comparison between incompatible types
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 302, in test_type_error10
        b < a
    TypeError: '<' not supported between instances of 'int' and 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to do an order comparison (<)
        between two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 302 of file TESTS:\runtime\test_type_error.py.
    
       300:         a = "a"
       301:         b = 42
    -->302:         b < a
       303:     except Exception as e:

            b: 42
            a: 'a'
        


TypeError - 11: bad operand type for unary +
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 352, in test_type_error11
        a =+ "def"
    TypeError: bad operand type for unary +: 'str'
    
        Perhaps you meant to write `+=` instead of `=+`
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You tried to use the unary operator '+'
        with the following type of object: a string (`str`).
        This operation is not defined for this type of object.
        
        Perhaps you meant to write `+=` instead of `=+`
        
    Exception raised on line 352 of file TESTS:\runtime\test_type_error.py.
    
       350:         # fmt: off
       351:         a = "abc"
    -->352:         a =+ "def"
                       ^^^^^^^
       353:         # fmt: on


TypeError - 12: object does not support item assignment
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 370, in test_type_error12
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        In Python, some objects are known as immutable:
        once defined, their value cannot be changed.
        You tried change part of such an immutable object: a `tuple`,
        most likely by using an indexing operation.
        
    Exception raised on line 370 of file TESTS:\runtime\test_type_error.py.
    
       368:     a = (1, 2, 3)
       369:     try:
    -->370:         a[0] = 0
       371:     except Exception as e:

            a[0]: 1
            a: (1, 2, 3)
        


TypeError - 13: wrong number of positional arguments
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 402, in test_type_error13
        A().f(1)
    TypeError: f() takes 1 positional argument but 2 were given
    
        Perhaps you forgot `self` when defining `f`.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You apparently have called the function `f` with
        2 positional argument(s) while it requires 1
        such positional argument(s).
        Perhaps you forgot `self` when defining `f`.
        
    Exception raised on line 402 of file TESTS:\runtime\test_type_error.py.
    
       400: 
       401:     try:
    -->402:         A().f(1)
       403:     except Exception as e:

            A: <class A> from test_type_error.test_type_error13
        


TypeError - 14: missing positional arguments
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 421, in test_type_error14
        fn(1)
    TypeError: fn() missing 2 required positional arguments: 'b' and 'c'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You apparently have called the function 'fn()' with
        fewer positional arguments than it requires (2 missing).
        
    Exception raised on line 421 of file TESTS:\runtime\test_type_error.py.
    
       419: 
       420:     try:
    -->421:         fn(1)
       422:     except Exception as e:

            fn: <function fn> from test_type_error14
        


TypeError - 15: list object is not callable
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 456, in test_type_error15
        _ = [1, 2](3 + 4)
    TypeError: 'list' object is not callable
    
        Did you mean `[1, 2][3 + 4]`?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        Because of the surrounding parenthesis, `(3 + 4)` 
        is interpreted by Python as indicating a function call for 
        `[1, 2]`, which is an object of type `list`
        which cannot be called.
        
        However, `[1, 2]` is a sequence.
        Perhaps you meant to use `[]` instead of `()` and write
        `[1, 2][3 + 4]`
        
    Exception raised on line 456 of file TESTS:\runtime\test_type_error.py.
    
       454: 
       455:     try:
    -->456:         _ = [1, 2](3 + 4)
                        ^^^^^^^^^^^^^
       457:     except Exception as e:


TypeError - 16: exception derived from BaseException
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 481, in test_type_error16
        raise "exception"
    TypeError: exceptions must derive from BaseException
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        In Python 3, exceptions must be derived from BaseException.
        
    Exception raised on line 481 of file TESTS:\runtime\test_type_error.py.
    
       479: def test_type_error16():
       480:     try:
    -->481:         raise "exception"
       482:     except Exception as e:


TypeError - 17: can't multiply sequence by non-int
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 550, in test_type_error17
        "a" * "2"
    TypeError: can't multiply sequence by non-int of type 'str'
    
        Did you forget to convert `"2"` into an integer?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You can only multiply sequences, such as list, tuples,
         strings, etc., by integers.
        Perhaps you forgot to convert `"2"` into an integer.
        
    Exception raised on line 550 of file TESTS:\runtime\test_type_error.py.
    
       548: 
       549:     try:
    -->550:         "a" * "2"
       551:     except Exception as e:


TypeError - 18: object cannot be interpreted as an integer
----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 598, in test_type_error18
        range(c, d)
    TypeError: 'str' object cannot be interpreted as an integer
    
        Did you forget to convert `c, d` into integers?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
        You wrote an object of type `str` where an integer was expected.
        Perhaps you forgot to convert `c, d` into integers.
    Exception raised on line 598 of file TESTS:\runtime\test_type_error.py.
    
       596:     c, d = "2", "3"
       597:     try:
    -->598:         range(c, d)
       599:     except Exception as e:

            c: '2'
            d: '3'
        


UnboundLocalError - 1: missing global
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_unbound_local_error_missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 11, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        Did you forget to add `global spam_missing_global`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
        The name `spam_missing_global` exists in the global scope.
        Perhaps the statement
        
            global spam_missing_global
        
        should have been included as the first line inside your function.
        
    Execution stopped on line 27 of file TESTS:\runtime\test_unbound_local_error.py.
    
       25: 
       26:     try:
    -->27:         outer_missing_global()
       28:     except Exception as e:

            global outer_missing_global: <function outer_missing_global>
        
    Exception raised on line 9 of file TESTS:\runtime\test_unbound_local_error.py.
    
        7: def outer_missing_global():
        8:     def inner():
    --> 9:         spam_missing_global += 1

            global spam_missing_global: 1
        


UnboundLocalError - 2: missing nonlocal
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 48, in test_unbound_local_error_missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 20, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 18, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        Did you forget to add `nonlocal spam_missing_nonlocal`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
        The name `spam_missing_nonlocal` exists in the nonlocal scope.
        Perhaps the statement
        
            nonlocal spam_missing_nonlocal
        
        should have been included as the first line inside your function.
        
    Execution stopped on line 48 of file TESTS:\runtime\test_unbound_local_error.py.
    
       46: 
       47:     try:
    -->48:         outer_missing_nonlocal()
       49:     except Exception as e:

            global outer_missing_nonlocal: <function outer_missing_nonlocal>
        
    Exception raised on line 18 of file TESTS:\runtime\test_unbound_local_error.py.
    
       16: 
       17:     def inner():
    -->18:         spam_missing_nonlocal += 1


ValueError - 1: not enough to unpack
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 20, in test_not_enough_values_to_unpack
        a, b, c = d
    ValueError: not enough values to unpack (expected 3, got 2)
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
        Unpacking is a convenient way to assign a name,
        to each item of an iterable.
        In this instance, there are more names (3)
        than the length of the iterable, a string (`str`) of length 2.
        
    Exception raised on line 20 of file TESTS:\runtime\test_value_error.py.
    
       18:     d = "ab"
       19:     try:
    -->20:         a, b, c = d
       21:     except Exception as e:

            d: 'ab'
        


ValueError - 2: too many to unpack
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 35, in test_too_many_values_to_unpack
        a, b = c
    ValueError: too many values to unpack (expected 2)
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
        Unpacking is a convenient way to assign a name,
        to each item of an iterable.
        In this instance, there are fewer names (2)
        than the length of the iterable, a `list` of length 3.
        
    Exception raised on line 35 of file TESTS:\runtime\test_value_error.py.
    
       33:     c = [1, 2, 3]
       34:     try:
    -->35:         a, b = c
       36:     except Exception as e:

            c: [1, 2, 3]
        


Unknown exception
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unknown_error.py", line 10, in test_function_unknown_error
        raise MyException("Some informative message about an unknown exception.")
    MyException: Some informative message about an unknown exception.
    
    No information is available about this exception.
    
    Exception raised on line 10 of file TESTS:\runtime\test_unknown_error.py.
    
        8: def test_function_unknown_error():
        9:     try:
    -->10:         raise MyException("Some informative message about an unknown exception.")
       11:     except Exception as e:

            global MyException: <class test_unknown_error.MyException>
        


ZeroDivisionError - 1
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 6, in test_zero_division_error
        1 / 0
    ZeroDivisionError: division by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide
    a value by zero:
        `result = my_variable / 0.`
    It can also happen if you calculate the remainder of a division
    using the modulo operator `%`:
        `result = my_variable % 0`
    
    Exception raised on line 6 of file TESTS:\runtime\test_zero_division_error.py.
    
       4: def test_zero_division_error():
       5:     try:
    -->6:         1 / 0
       7:     except Exception as e:


ZeroDivisionError - 2
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 21, in test_zero_division_error2
        1 % zero
    ZeroDivisionError: integer division or modulo by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide
    a value by zero:
        `result = my_variable / 0.`
    It can also happen if you calculate the remainder of a division
    using the modulo operator `%`:
        `result = my_variable % 0`
    
    Exception raised on line 21 of file TESTS:\runtime\test_zero_division_error.py.
    
       19:     zero = 0
       20:     try:
    -->21:         1 % zero
       22:     except Exception as e:

            zero: 0
        

