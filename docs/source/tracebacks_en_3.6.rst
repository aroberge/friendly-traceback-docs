
Friendly tracebacks - in English
======================================

Friendly-traceback aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Ideally, an example of each case handled by friendly-traceback
should be included here.

.. note::

     The content of this page is generated by running
     trb_english.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.1.8a
Python version: 3.6.8



ArithmeticError
---------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_arithmetic_error.py", line 9, in test_arithmetic_error
        raise ArithmeticError
    ArithmeticError: 
    
    `ArithmeticError` is the base class for those built-in exceptions
    that are raised for various arithmetic errors.
    It is unusual that you are seeing this exception;
    normally, a more specific exception should have been raised.
    
    Exception raised on line 9 of file TESTS:\runtime\test_arithmetic_error.py.
    
        8:         # likely be raised.
    --> 9:         raise ArithmeticError
       10:     except Exception as e:

        Known objects shown above:
            ArithmeticError: <class 'ArithmeticError'>
            Exception: <class 'Exception'>
            e: ArithmeticError()
        


AttributeError - class attribute
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 34, in test_attribute_error
        a.x  # Testing instance
    AttributeError: 'A' object has no attribute 'x'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        The object `a` has no attribute named `x`.
        
    Exception raised on line 34 of file TESTS:\runtime\test_attribute_error.py.
    
       33:         a = A()
    -->34:         a.x  # Testing instance
       35:     except Exception as e:

        Known objects shown above:
            a: <test_attribute_error.test_attribute_error.<locals>.A object>
            A: <class 'test_attribute_error.test_attribute_error.<locals>.A'>
            Exception: <class 'Exception'>
            e: AttributeError("'A' object has no attribute 'x'",)
        


AttributeError - typo in module attribute
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 63, in test_misspelled_module_attribute
        string.ascii_lowecase
    AttributeError: module 'string' has no attribute 'ascii_lowecase'
    
        Did you mean `ascii_lowercase`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        Perhaps you meant to write `string.ascii_lowercase` instead of `string.ascii_lowecase`
        
    Exception raised on line 63 of file TESTS:\runtime\test_attribute_error.py.
    
       62:     try:
    -->63:         string.ascii_lowecase
       64:     except Exception as e:

        Known objects shown above:
            string: <module 'string'> from PYTHON_LIB:\string.py
            Exception: <class 'Exception'>
            e: AttributeError("module 'string' has no attribute 'ascii_lowe...)
        


AttributeError - typo in module attribute 2
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 78, in test_misspelled_module_attribute_2
        math.cost
    AttributeError: module 'math' has no attribute 'cost'
    
        Did you mean one of the following: `cos, cosh, acos`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        Instead of writing `math.cost`, perhaps you meant to write one of 
        the following names which are attributes of module `math`:
        `cos, cosh, acos`
        
    Exception raised on line 78 of file TESTS:\runtime\test_attribute_error.py.
    
       77:     try:
    -->78:         math.cost
       79:     except Exception as e:

        Known objects shown above:
            math: <module 'math' (builtin)>
            Exception: <class 'Exception'>
            e: AttributeError("module 'math' has no attribute 'cost'",)
        


FileNotFoundError
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 6, in test_file_not_found_error
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    A `FileNotFoundError` exception indicates that you
    are trying to open a file that cannot be found by Python.
    This could be because you misspelled the name of the file.
    
        In your program, the name of the
        file that cannot be found is `does_not_exist`.
        
    Exception raised on line 6 of file TESTS:\runtime\test_file_not_found_error.py.
    
       5:     try:
    -->6:         open("does_not_exist")
       7:     except Exception as e:

        Known objects shown above:
            open: <builtin function open>
            Exception: <class 'Exception'>
            e: FileNotFoundError(2, 'No such file or directory')
        


ImportError
-----------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 6, in test_import_error
        from math import Pi
    ImportError: cannot import name 'Pi'
    
        Did you mean `pi`?
        
    An `ImportError` exception indicates that a certain object could not
    be imported from a module or package. Most often, this is
    because the name of the object is not spelled correctly.
    
        Perhaps you meant to import `pi` (from `math`) instead of `Pi`
        
    Exception raised on line 6 of file TESTS:\runtime\test_import_error.py.
    
       5:     try:
    -->6:         from math import Pi
       7:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: ImportError("cannot import name 'Pi'",)
        


KeyError
--------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 7, in test_key_error
        d["c"]
    KeyError: 'c'
    
    A `KeyError` is raised when a value is not found as a
    key in a Python dict.
    
        In your program, the key that cannot be found is `'c'`.
        
    Exception raised on line 7 of file TESTS:\runtime\test_key_error.py.
    
       6:     try:
    -->7:         d["c"]
       8:     except Exception as e:

        Known objects shown above:
            d: {'a': 1, 'b': 2}
            Exception: <class 'Exception'>
            e: KeyError('c',)
        


LookupError
-----------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_lookup_error.py", line 10, in test_lookup_error
        raise LookupError("Fake message")
    LookupError: Fake message
    
    `LookupError` is the base class for the exceptions that are raised
    when a key or index used on a mapping or sequence is invalid.
    It can also be raised directly by codecs.lookup().
    
    Exception raised on line 10 of file TESTS:\runtime\test_lookup_error.py.
    
        9:         # it directly here for our example.
    -->10:         raise LookupError("Fake message")
       11:     except Exception as e:

        Known objects shown above:
            LookupError: <class 'LookupError'>
            Exception: <class 'Exception'>
            e: LookupError('Fake message',)
        


IndexError - short tuple
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 8, in test_index_error1
        print(a[3], b[2])
    IndexError: tuple index out of range
    
    An `IndexError` occurs when you are try to get an item from a list,
    a tuple, or a similar object (sequence), by using an index which
    does not exists; typically, this is because the index you give
    is greater than the length of the sequence.
    Reminder: the first item of a sequence is at index 0.
    
    Exception raised on line 8 of file TESTS:\runtime\test_index_error.py.
    
       7:     try:
    -->8:         print(a[3], b[2])
       9:     except Exception as e:

        Known objects shown above:
            print: <builtin function print>
            a: (1, 2, 3)
            b: [1, 2, 3]
            Exception: <class 'Exception'>
            e: IndexError('tuple index out of range',)
        


IndexError - long list
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 21, in test_index_error2
        print(a[50], b[0])
    IndexError: list index out of range
    
    An `IndexError` occurs when you are try to get an item from a list,
    a tuple, or a similar object (sequence), by using an index which
    does not exists; typically, this is because the index you give
    is greater than the length of the sequence.
    Reminder: the first item of a sequence is at index 0.
    
    Exception raised on line 21 of file TESTS:\runtime\test_index_error.py.
    
       20:     try:
    -->21:         print(a[50], b[0])
       22:     except Exception as e:

        Known objects shown above:
            print: <builtin function print>
            a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
            b: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...)
                len(b): 50
            Exception: <class 'Exception'>
            e: IndexError('list index out of range',)
        


ModuleNotFoundError
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 6, in test_module_not_found_error
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        Did you mean `tkinter`?
        
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
        The name of the module that could not be imported is `Tkinter`.
        `tkinter` is an existing module that has a similar name.
        
    Exception raised on line 6 of file TESTS:\runtime\test_module_not_found_error.py.
    
       5:     try:
    -->6:         import Tkinter
       7:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: ModuleNotFoundError("No module named 'Tkinter'",)
        


NameError - 1
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 6, in test_name_error
        this = something
    NameError: name 'something' is not defined
    
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `something` is an unknown name.
        I have no additional information for you.
    Exception raised on line 6 of file TESTS:\runtime\test_name_error.py.
    
       5:     try:
    -->6:         this = something
       7:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: NameError("name 'something' is not defined",)
        


NameError - 2
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 19, in test_name_error2
        x = babs(-1)
    NameError: name 'babs' is not defined
    
        Did you mean `abs`?
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `babs` is an unknown name.
        Instead of writing `babs`, perhaps you meant one of the following:
        *   Local scope: `nabs`
        *   Global scope: `fabs`
        *   Python builtins: `abs`
        
    Exception raised on line 19 of file TESTS:\runtime\test_name_error.py.
    
       18:     try:
    -->19:         x = babs(-1)
       20:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: NameError("name 'babs' is not defined",)
        


NameError - 3
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 33, in test_name_error3
        y = x
    NameError: name 'x' is not defined
    
        Did you use a colon instead of an equal sign?
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `x` is an unknown name.
        A type hint found for `x` in the global scope.
        Perhaps you had used a colon instead of an equal sign and written
        
            x : 3
        
        instead of
        
            x = 3
        
    Exception raised on line 33 of file TESTS:\runtime\test_name_error.py.
    
       32:     try:
    -->33:         y = x
       34:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: NameError("name 'x' is not defined",)
        


NameError - 4
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 45, in test_name_error4
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined
    
        Did you mean `cos`?
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `cost` is an unknown name.
        Instead of writing `cost`, perhaps you meant one of the following:
        *   Global scope: `cos`, `cosh`, `acos`
        
    Exception raised on line 45 of file TESTS:\runtime\test_name_error.py.
    
       44:     try:
    -->45:         cost  # wrote from math import * above
       46:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: NameError("name 'cost' is not defined",)
        


OverflowError
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 6, in test_overflow_error
        2.0 ** 1600
    OverflowError: (34, 'Result too large')
    
    An `OverflowError` is raised when the result of an arithmetic operation
    is too large to be handled by the computer's processor.
    
    Exception raised on line 6 of file TESTS:\runtime\test_overflow_error.py.
    
       5:     try:
    -->6:         2.0 ** 1600
       7:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: OverflowError(34, 'Result too large')
        


RecursionError
--------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_recursion_error.py", line 8, in test_function_recursion_error
        a()
    
           ... More lines not shown. ...
    
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
    RecursionError: maximum recursion depth exceeded
    
    A `RecursionError` is raised when a function calls itself,
    directly or indirectly, too many times.
    It almost always indicates that you made an error in your code
    and that your program would never stop.
    
    Execution stopped on line 8 of file TESTS:\runtime\test_recursion_error.py.
    
       7:     try:
    -->8:         a()
       9:     except Exception as e:

        Known objects shown above:
            a: <function test_function_recursion_error.<locals>.a>
            Exception: <class 'Exception'>
            e: RecursionError('maximum recursion depth exceeded',)
        
    Exception raised on line 6 of file TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
    -->6:         return a()
       7:     try:

        Known objects shown above:
            a: <function test_function_recursion_error.<locals>.a>
        


TypeError - 1: concatenate two different types
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 8, in test_type_error1
        result = a + one
    TypeError: must be str, not int
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to concatenate (add) two different types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 8 of file TESTS:\runtime\test_type_error.py.
    
       7:         one = 1
    -->8:         result = a + one
       9:     except Exception as e:

        Known objects shown above:
            one: 1
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError('must be str, not int',)
        


TypeError - 1a: concatenate two different types
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 25, in test_type_error1a
        result = a + a_list
    TypeError: must be str, not list
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to concatenate (add) two different types of objects:
        a string (`str`) and a `list`
        
    Exception raised on line 25 of file TESTS:\runtime\test_type_error.py.
    
       24:         a_list = [1, 2, 3]
    -->25:         result = a + a_list
       26:     except Exception as e:

        Known objects shown above:
            a_list: [1, 2, 3]
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError('must be str, not list',)
        


TypeError - 1b: concatenate two different types
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 42, in test_type_error1b
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to concatenate (add) two different types of objects:
        a `tuple` and a `list`
        
    Exception raised on line 42 of file TESTS:\runtime\test_type_error.py.
    
       41:         a_list = [1, 2, 3]
    -->42:         result = a_tuple + a_list
       43:     except Exception as e:

        Known objects shown above:
            a_list: [1, 2, 3]
            a_tuple: (1, 2, 3)
            Exception: <class 'Exception'>
            e: TypeError('can only concatenate tuple (not "list") to tuple',)
        


TypeError - 2: unsupported operand type(s) for +
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 57, in test_type_error2
        result = one + none
    TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to add two incompatible types of objects:
        an integer (`int`) and a variable equal to `None` (`NoneType`)
        
    Exception raised on line 57 of file TESTS:\runtime\test_type_error.py.
    
       56:         none = None
    -->57:         result = one + none
       58:     except Exception as e:

        Known objects shown above:
            none: None
            one: 1
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for +: 'int' and 'Non...)
        


TypeError - 2a: unsupported operand type(s) for +=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 74, in test_type_error2a
        one += two
    TypeError: unsupported operand type(s) for +=: 'int' and 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to add two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 74 of file TESTS:\runtime\test_type_error.py.
    
       73:         two = "two"
    -->74:         one += two
       75:     except Exception as e:

        Known objects shown above:
            two: 'two'
            one: 1
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for +=: 'int' and 'str'",)
        


TypeError - 3: unsupported operand type(s) for -
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 89, in test_type_error3
        result = a - b
    TypeError: unsupported operand type(s) for -: 'tuple' and 'list'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to subtract two incompatible types of objects:
        a `tuple` and a `list`
        
    Exception raised on line 89 of file TESTS:\runtime\test_type_error.py.
    
       88:         b = [3, 4]
    -->89:         result = a - b
       90:     except Exception as e:

        Known objects shown above:
            b: [3, 4]
            a: (1, 2)
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for -: 'tuple' and 'l...)
        


TypeError - 3a: unsupported operand type(s) for -=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 104, in test_type_error3a
        b -= a
    TypeError: unsupported operand type(s) for -=: 'list' and 'tuple'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to subtract two incompatible types of objects:
        a `list` and a `tuple`
        
    Exception raised on line 104 of file TESTS:\runtime\test_type_error.py.
    
       103:         b = [3, 4]
    -->104:         b -= a
       105:     except Exception as e:

        Known objects shown above:
            b: [3, 4]
            a: (1, 2)
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for -=: 'list' and 't...)
        


TypeError - 4: unsupported operand type(s) for *
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 119, in test_type_error4
        result = a * b
    TypeError: unsupported operand type(s) for *: 'complex' and 'set'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to multiply two incompatible types of objects:
        a complex number and a `set`
        
    Exception raised on line 119 of file TESTS:\runtime\test_type_error.py.
    
       118:         b = {2, 3}
    -->119:         result = a * b
       120:     except Exception as e:

        Known objects shown above:
            b: {2, 3}
            a: 1j
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for *: 'complex' and ...)
        


TypeError - 4a: unsupported operand type(s) for ``*=``
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 134, in test_type_error4a
        b *= a
    TypeError: unsupported operand type(s) for *=: 'set' and 'complex'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to multiply two incompatible types of objects:
        a `set` and a complex number
        
    Exception raised on line 134 of file TESTS:\runtime\test_type_error.py.
    
       133:         b = {2, 3}
    -->134:         b *= a
       135:     except Exception as e:

        Known objects shown above:
            b: {2, 3}
            a: 1j
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for *=: 'set' and 'co...)
        


TypeError - 5: unsupported operand type(s) for /
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 149, in test_type_error5
        result = a / b
    TypeError: unsupported operand type(s) for /: 'dict' and 'float'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to divide two incompatible types of objects:
        a dictionary (`dict`) and a number (`float`)
        
    Exception raised on line 149 of file TESTS:\runtime\test_type_error.py.
    
       148:         b = 3.1416
    -->149:         result = a / b
       150:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for /: 'dict' and 'fl...)
        


TypeError - 5a: unsupported operand type(s) for /=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 164, in test_type_error5a
        b /= a
    TypeError: unsupported operand type(s) for /=: 'float' and 'dict'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to divide two incompatible types of objects:
        a number (`float`) and a dictionary (`dict`)
        
    Exception raised on line 164 of file TESTS:\runtime\test_type_error.py.
    
       163:         b = 3.1416
    -->164:         b /= a
       165:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for /=: 'float' and '...)
        


TypeError - 5b: unsupported operand type(s) for //
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 179, in test_type_error5b
        result = a // b
    TypeError: unsupported operand type(s) for //: 'dict' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to divide two incompatible types of objects:
        a dictionary (`dict`) and an integer (`int`)
        
    Exception raised on line 179 of file TESTS:\runtime\test_type_error.py.
    
       178:         b = 1
    -->179:         result = a // b
       180:     except Exception as e:

        Known objects shown above:
            b: 1
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for //: 'dict' and 'i...)
        


TypeError - 5c: unsupported operand type(s) for //=
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 194, in test_type_error5c
        b //= a
    TypeError: unsupported operand type(s) for //=: 'float' and 'dict'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to divide two incompatible types of objects:
        a number (`float`) and a dictionary (`dict`)
        
    Exception raised on line 194 of file TESTS:\runtime\test_type_error.py.
    
       193:         b = 3.1416
    -->194:         b //= a
       195:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for //=: 'float' and ...)
        


TypeError - 6: unsupported operand type(s) for &
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 209, in test_type_error6
        result = a & b
    TypeError: unsupported operand type(s) for &: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to perform the bitwise operation &
        on two incompatible types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 209 of file TESTS:\runtime\test_type_error.py.
    
       208:         b = 2
    -->209:         result = a & b
       210:     except Exception as e:

        Known objects shown above:
            b: 2
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for &: 'str' and 'int'",)
        


TypeError - 6a: unsupported operand type(s) for &=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 224, in test_type_error6a
        b &= a
    TypeError: unsupported operand type(s) for &=: 'int' and 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to perform the bitwise operation &=
        on two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 224 of file TESTS:\runtime\test_type_error.py.
    
       223:         b = 2
    -->224:         b &= a
       225:     except Exception as e:

        Known objects shown above:
            b: 2
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for &=: 'int' and 'str'",)
        


TypeError - 7: unsupported operand type(s) for **
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 239, in test_type_error7
        result = a ** b
    TypeError: unsupported operand type(s) for ** or pow(): 'dict' and 'float'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to exponentiate (raise to a power)
        using two incompatible types of objects:
        a dictionary (`dict`) and a number (`float`)
        
    Exception raised on line 239 of file TESTS:\runtime\test_type_error.py.
    
       238:         b = 3.1416
    -->239:         result = a ** b
       240:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for ** or pow(): 'dic...)
        


TypeError - 7a: unsupported operand type(s) for ``**=``
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 254, in test_type_error7a
        a **= b
    TypeError: unsupported operand type(s) for ** or pow(): 'dict' and 'float'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to exponentiate (raise to a power)
        using two incompatible types of objects:
        a dictionary (`dict`) and a number (`float`)
        
    Exception raised on line 254 of file TESTS:\runtime\test_type_error.py.
    
       253:         b = 3.1416
    -->254:         a **= b
       255:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for ** or pow(): 'dic...)
        


TypeError - 8: unsupported operand type(s) for >>
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 269, in test_type_error8
        result = a >> b
    TypeError: unsupported operand type(s) for >>: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to perform the bit shifting operation >>
        on two incompatible types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 269 of file TESTS:\runtime\test_type_error.py.
    
       268:         b = 42
    -->269:         result = a >> b
       270:     except Exception as e:

        Known objects shown above:
            b: 42
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for >>: 'str' and 'int'",)
        


TypeError - 8a: unsupported operand type(s) for >>=
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 284, in test_type_error8a
        a >>= b
    TypeError: unsupported operand type(s) for >>=: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to perform the bit shifting operation >>=
        on two incompatible types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 284 of file TESTS:\runtime\test_type_error.py.
    
       283:         b = 42
    -->284:         a >>= b
       285:     except Exception as e:

        Known objects shown above:
            b: 42
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for >>=: 'str' and 'i...)
        


TypeError - 9: unsupported operand type(s) for @
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 299, in test_type_error9
        result = a @ b
    TypeError: unsupported operand type(s) for @: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to use the operator @
        using two incompatible types of objects:
        a string (`str`) and an integer (`int`).
        This operator is normally used only
        for multiplication of matrices.
        
    Exception raised on line 299 of file TESTS:\runtime\test_type_error.py.
    
       298:         b = 2
    -->299:         result = a @ b
       300:     except Exception as e:

        Known objects shown above:
            b: 2
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for @: 'str' and 'int'",)
        


TypeError - 9a: unsupported operand type(s) for @=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 314, in test_type_error9a
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to use the operator @=
        using two incompatible types of objects:
        a string (`str`) and an integer (`int`).
        This operator is normally used only
        for multiplication of matrices.
        
    Exception raised on line 314 of file TESTS:\runtime\test_type_error.py.
    
       313:         b = 2
    -->314:         a @= b
       315:     except Exception as e:

        Known objects shown above:
            b: 2
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for @=: 'str' and 'int'",)
        


TypeError - 10: comparison between incompatible types
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 329, in test_type_error10
        b < a
    TypeError: '<' not supported between instances of 'int' and 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to do an order comparison (<)
        between two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 329 of file TESTS:\runtime\test_type_error.py.
    
       328:         b = 42
    -->329:         b < a
       330:     except Exception as e:

        Known objects shown above:
            b: 42
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("'<' not supported between instances of 'int' and ...)
        


TypeError - 11: bad operand type for unary +
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 342, in test_type_error11
        a = +"abc"
    TypeError: bad operand type for unary +: 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to use the unary operator '+'
        with the following type of object: a string (`str`).
        This operation is not defined for this type of object.
        
    Exception raised on line 342 of file TESTS:\runtime\test_type_error.py.
    
       341:     try:
    -->342:         a = +"abc"
       343:         print(a)

        Known objects shown above:
            print: <builtin function print>
        


TypeError - 11a: bad operand type for unary -
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 356, in test_type_error11a
        a = -[1, 2, 3]
    TypeError: bad operand type for unary -: 'list'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to use the unary operator '-'
        with the following type of object: a `list`.
        This operation is not defined for this type of object.
        
    Exception raised on line 356 of file TESTS:\runtime\test_type_error.py.
    
       355:     try:
    -->356:         a = -[1, 2, 3]
       357:         print(a)

        Known objects shown above:
            print: <builtin function print>
        


TypeError - 11b: bad operand type for unary ~
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 370, in test_type_error11b
        a = ~(1, 2, 3)
    TypeError: bad operand type for unary ~: 'tuple'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to use the unary operator '~'
        with the following type of object: a `tuple`.
        This operation is not defined for this type of object.
        
    Exception raised on line 370 of file TESTS:\runtime\test_type_error.py.
    
       369:     try:
    -->370:         a = ~(1, 2, 3)
       371:         print(a)

        Known objects shown above:
            print: <builtin function print>
        


TypeError - 12: object does not support item assignment
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 385, in test_type_error12
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        In Python, some objects are known as immutable:
        once defined, their value cannot be changed.
        You tried change part of such an immutable object: a `tuple`,
        most likely by using an indexing operation.
        
    Exception raised on line 385 of file TESTS:\runtime\test_type_error.py.
    
       384:     try:
    -->385:         a[0] = 0
       386:     except Exception as e:

        Known objects shown above:
            a: (1, 2, 3)
            Exception: <class 'Exception'>
            e: TypeError("'tuple' object does not support item assignment",)
        


TypeError - 13: wrong number of positional arguments
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 401, in test_type_error13
        fn(1)
    TypeError: fn() takes 0 positional arguments but 1 was given
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You apparently have called the function `fn` with
        1 positional argument(s) while it requires 0
        such positional argument(s).
        
    Exception raised on line 401 of file TESTS:\runtime\test_type_error.py.
    
       400:     try:
    -->401:         fn(1)
       402:     except Exception as e:

        Known objects shown above:
            fn: <function test_type_error13.<locals>.fn>
            Exception: <class 'Exception'>
            e: TypeError('fn() takes 0 positional arguments but 1 was given',)
        


TypeError - 13a: wrong number of positional arguments
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 419, in test_type_error13a
        A().f(1)
    TypeError: f() takes 1 positional argument but 2 were given
    
        Perhaps you forgot `self` when defining `f`.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You apparently have called the function `f` with
        2 positional argument(s) while it requires 1
        such positional argument(s).
        Perhaps you forgot `self` when defining `f`.
        
    Exception raised on line 419 of file TESTS:\runtime\test_type_error.py.
    
       418:     try:
    -->419:         A().f(1)
       420:     except Exception as e:

        Known objects shown above:
            A: <class 'test_type_error.test_type_error13a.<locals>.A'>
            Exception: <class 'Exception'>
            e: TypeError('f() takes 1 positional argument but 2 were given',)
        


TypeError - 14: missing positional arguments
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 437, in test_type_error14
        fn(1)
    TypeError: fn() missing 2 required positional arguments: 'b' and 'c'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You apparently have called the function 'fn()' with
        fewer positional arguments than it requires (2 missing).
        
    Exception raised on line 437 of file TESTS:\runtime\test_type_error.py.
    
       436:     try:
    -->437:         fn(1)
       438:     except Exception as e:

        Known objects shown above:
            fn: <function test_type_error14.<locals>.fn>
            Exception: <class 'Exception'>
            e: TypeError("fn() missing 2 required positional arguments: 'b'...)
        


TypeError - 15: tuple object is not callable
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 451, in test_type_error15
        _ = (1, 2)(3, 4)
    TypeError: 'tuple' object is not callable
    
        Perhaps you had a missing comma between two tuples.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        I suspect that you had an object of this type, a `tuple`,
        followed by what looked like a tuple, '(...)',
        which Python took as an indication of a function call.
        Perhaps you had a missing comma between two tuples.
        
    Exception raised on line 451 of file TESTS:\runtime\test_type_error.py.
    
       450:     try:
    -->451:         _ = (1, 2)(3, 4)
       452:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: TypeError("'tuple' object is not callable",)
        


TypeError - 15a: list object is not callable
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 464, in test_type_error15a
        _ = [1, 2](3, 4)
    TypeError: 'list' object is not callable
    
        Perhaps you had a missing comma before the tuple.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        I suspect that you had an object of this type, a `list`,
        followed by what looked like a tuple, '(...)',
        which Python took as an indication of a function call.
        Perhaps you had a missing comma before the tuple.
        
    Exception raised on line 464 of file TESTS:\runtime\test_type_error.py.
    
       463:     try:
    -->464:         _ = [1, 2](3, 4)
       465:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: TypeError("'list' object is not callable",)
        


TypeError - 16: exception derived from BaseException
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 477, in test_type_error16
        raise "exception"
    TypeError: exceptions must derive from BaseException
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        In Python 3, exceptions must be derived from BaseException.
        
    Exception raised on line 477 of file TESTS:\runtime\test_type_error.py.
    
       476:     try:
    -->477:         raise "exception"
       478:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: TypeError('exceptions must derive from BaseException',)
        


UnboundLocalError - 1: missing global
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_unbound_local_error_missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 11, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        Did you forget to add `global spam_missing_global`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
        The name `spam_missing_global` exists in the global scope.
        Perhaps the statement
        
            global spam_missing_global
        
        should have been included as the first line inside your function.
        
    Execution stopped on line 27 of file TESTS:\runtime\test_unbound_local_error.py.
    
       26:     try:
    -->27:         outer_missing_global()
       28:     except Exception as e:

        Known objects shown above:
            global outer_missing_global: <function outer_missing_global>
            Exception: <class 'Exception'>
            e: UnboundLocalError("local variable 'spam_missing_global' refe...)
        
    Exception raised on line 9 of file TESTS:\runtime\test_unbound_local_error.py.
    
        8:     def inner():
    --> 9:         spam_missing_global += 1
       10: 

        Known objects shown above:
            global spam_missing_global: 1
        


UnboundLocalError - 2: missing nonlocal
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 47, in test_unbound_local_error_missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 20, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 18, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        Did you forget to add `nonlocal spam_missing_nonlocal`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
        The name `spam_missing_nonlocal` exists in the nonlocal scope.
        Perhaps the statement
        
            nonlocal spam_missing_nonlocal
        
        should have been included as the first line inside your function.
        
    Execution stopped on line 47 of file TESTS:\runtime\test_unbound_local_error.py.
    
       46:     try:
    -->47:         outer_missing_nonlocal()
       48:     except Exception as e:

        Known objects shown above:
            global outer_missing_nonlocal: <function outer_missing_nonlocal>
            Exception: <class 'Exception'>
            e: UnboundLocalError("local variable 'spam_missing_nonlocal' re...)
        
    Exception raised on line 18 of file TESTS:\runtime\test_unbound_local_error.py.
    
       17:     def inner():
    -->18:         spam_missing_nonlocal += 1
       19: 


Unknown exception
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unknown_error.py", line 10, in test_function_unknown_error
        raise MyException("Some informative message about an unknown exception.")
    MyException: Some informative message about an unknown exception.
    
    No information is known about this exception.
    Please report this example to
    https://github.com/aroberge/friendly-traceback/issues
    
    Exception raised on line 10 of file TESTS:\runtime\test_unknown_error.py.
    
        9:     try:
    -->10:         raise MyException("Some informative message about an unknown exception.")
       11:     except Exception as e:

        Known objects shown above:
            global MyException: <class 'test_unknown_error.MyException'>
            Exception: <class 'Exception'>
            e: MyException('Some informative message about an unknown excep...)
        


ZeroDivisionError - 1
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 6, in test_zero_division_error
        1 / 0
    ZeroDivisionError: division by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide
    a value by zero:
        `result = my_variable / 0.`
    It can also happen if you calculate the remainder of a division
    using the modulo operator `%`:
        `result = my_variable % 0`
    
    Exception raised on line 6 of file TESTS:\runtime\test_zero_division_error.py.
    
       5:     try:
    -->6:         1 / 0
       7:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: ZeroDivisionError('division by zero',)
        


ZeroDivisionError - 2
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 20, in test_zero_division_error2
        1 % zero
    ZeroDivisionError: integer division or modulo by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide
    a value by zero:
        `result = my_variable / 0.`
    It can also happen if you calculate the remainder of a division
    using the modulo operator `%`:
        `result = my_variable % 0`
    
    Exception raised on line 20 of file TESTS:\runtime\test_zero_division_error.py.
    
       19:     try:
    -->20:         1 % zero
       21:     except Exception as e:

        Known objects shown above:
            zero: 0
            Exception: <class 'Exception'>
            e: ZeroDivisionError('integer division or modulo by zero',)
        

