
Friendly SyntaxError tracebacks - in English
=============================================

Friendly-traceback aims to provide friendlier feedback when an exception
is raised than what is done by Python.
This file contains only examples of SyntaxError and its sub-classes.
Ideally, an example of each case handled by friendly-traceback
should be included here.

.. note::

     The content of this page is generated by running
     trb_syntax_english.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.
     On Windows, if Sphinx is installed on your computer, it is suggested
     instead to run make_trb.bat in the root directory as it will create
     similar files for all languages *and* update the documentation.

Friendly-traceback version: 0.2.14a
Python version: 3.7.8



IndentationError - 1: expected an indented block
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_indentation_error1.py", line 4
        pass
           ^
    IndentationError: expected an indented block
    
    An `IndentationError` occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_indentation_error1.py'
    beyond the location indicated by --> and ^.
    
       1: '''Should raise IndentationError'''
       2: 
       3: if True:
    -->4: pass
             ^

        In this case, the line identified above
        was expected to begin a new indented block.
        

IndentationError - 2: unexpected indent
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_indentation_error2.py", line 4
        pass
       ^
    IndentationError: unexpected indent
    
    An `IndentationError` occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_indentation_error2.py'
    beyond the location indicated by --> and ^.
    
       1: '''Should raise IndentationError'''
       2: if True:
       3:     pass
    -->4:       pass
               ^

        In this case, the line identified above
        is more indented than expected and 
        does not match the indentation of the previous line.
        

IndentationError - 3: unindent does not match ...
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_indentation_error3.py", line 4
        pass
            ^
    IndentationError: unindent does not match any outer indentation level
    
    An `IndentationError` occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_indentation_error3.py'
    beyond the location indicated by --> and ^.
    
       1: '''Should raise IndentationError'''
       2: if True:
       3:       pass
    -->4:     pass
                  ^

        In this case, the line identified above is
        less indented than the preceding one,
        and is not aligned vertically with another block of code.
        

TabError
--------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_tab_error.py", line 7
        pass
            ^
    TabError: inconsistent use of tabs and spaces in indentation
    
    A `TabError` indicates that you have used both spaces
    and tab characters to indent your code.
    This is not allowed in Python.
    Indenting your code means to have block of codes aligned vertically
    by inserting either spaces or tab characters at the beginning of lines.
    Python's recommendation is to always use spaces to indent your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_tab_error.py'
    beyond the location indicated by --> and ^.
    
        4: 
        5: def test_tab_error():
        6:     if True:
    --> 7: 	pass
                ^

SyntaxError - Assign to keyword
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error1.py", line 3
        def = 2
            ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error1.py'
    beyond the location indicated by --> and ^.
    
       1: """ Should raise SyntaxError"""
       2: 
    -->3: def = 2
              ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You were trying to assign a value to the Python keyword `def`.
        This is not allowed.
        
        

SyntaxError - Missing colon - 1
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error2.py", line 3
        if True
               ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot a colon `:`.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error2.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: if True
                 ^
       4:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You wrote a statement beginning with
        `if` but forgot to add a colon `:` at the end
        
        

SyntaxError - Missing colon - 2
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error3.py", line 3
        while True  # a comment
                               ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot a colon `:`.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error3.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: while True  # a comment
                                 ^
       4:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You wrote a `while` loop but
        forgot to add a colon `:` at the end
        
        

SyntaxError - elif, not else if
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error4.py", line 5
        else if True:
              ^
    SyntaxError: invalid syntax
    
        Perhaps you meant to write `elif`.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error4.py'
    beyond the location indicated by --> and ^.
    
       2: 
       3: if False:
       4:     pass
    -->5: else if True:
                ^
       6:     print('ok')

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You likely meant to use Python's `elif` keyword
        but wrote `else if` instead
        
        

SyntaxError - elif, not elseif
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error5.py", line 5
        elseif True:
                  ^
    SyntaxError: invalid syntax
    
        Perhaps you meant to write `elif`.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error5.py'
    beyond the location indicated by --> and ^.
    
       2: 
       3: if False:
       4:     pass
    -->5: elseif True:
                    ^
       6:     print('ok')

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You likely meant to use Python's `elif` keyword
        but wrote `elseif` instead
        
        

SyntaxError - malformed def statment - 1
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error6.py", line 3
        def :
            ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error6.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: def :
              ^
       4:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You tried to define a function or method and did not use the correct syntax.
        The correct syntax is:
        
            def name ( optional_arguments ):
        

SyntaxError - malformed def statment - 2
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error7.py", line 3
        def name  :
                  ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot parentheses.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error7.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: def name  :
                    ^
       4:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You tried to define a function or method and did not use the correct syntax.
        The correct syntax is:
        
            def name ( optional_arguments ):
        

SyntaxError - malformed def statment - 3
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error8.py", line 3
        def ( arg )  :
            ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error8.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: def ( arg )  :
              ^
       4:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You tried to define a function or method and did not use the correct syntax.
        The correct syntax is:
        
            def name ( optional_arguments ):
        

SyntaxError - can't assign to literal - 1
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error9.py", line 3
        1 = a
       ^
    SyntaxError: can't assign to literal
    
        Perhaps you meant to write `a = 1`
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error9.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: can't assign to literal"""
       2: 
    -->3: 1 = a
         ^

        You wrote an expression like
        
            1 = a
        where `1`, on the left-hand side of the equal sign,
        is or includes an actual object of type `int`
        and is not simply the name of a variable.
        Perhaps you meant to write:
        
            a = 1
        
        

SyntaxError - can't assign to literal - 2
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error10.py", line 3
        1 = 2
       ^
    SyntaxError: can't assign to literal
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error10.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: can't assign to literal"""
       2: 
    -->3: 1 = 2
         ^

        You wrote an expression like
        
            1 = 2
        where `1`, on the left-hand side of the equal sign,
        is or includes an actual object of type `int`
        and is not simply the name of a variable.
        
        

SyntaxError - can't assign to literal - 3
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error52.py", line 7
        {1, 2, 3} = 4
       ^
    SyntaxError: can't assign to literal
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error52.py'
    beyond the location indicated by --> and ^.
    
        4: 
        5:  """
        6: 
    --> 7: {1, 2, 3} = 4
          ^

        You wrote an expression like
        
            {1, 2, 3} = 4
        where `{1, 2, 3}`, on the left-hand side of the equal sign,
        is or includes an actual object of type `set`
        and is not simply the name of a variable.
        
        

SyntaxError - can't assign to literal - 4
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error53.py", line 7
        {1 : 2, 2 : 4} = 5
       ^
    SyntaxError: can't assign to literal
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error53.py'
    beyond the location indicated by --> and ^.
    
        4: 
        5:  """
        6: 
    --> 7: {1 : 2, 2 : 4} = 5
          ^

        You wrote an expression like
        
            {1 : 2, 2 : 4} = 5
        where `{1 : 2, 2 : 4}`, on the left-hand side of the equal sign,
        is or includes an actual object of type `dict`
        and is not simply the name of a variable.
        
        

SyntaxError - can't assign to literal - 5
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error54.py", line 4
        1 = a = b
       ^
    SyntaxError: can't assign to literal
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error54.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: can't assign to literal
       2: or (Python 3.8) cannot assign to literal"""
       3: 
    -->4: 1 = a = b
         ^

        You wrote an expression like
        
            ... = variable_name
        where `...`, on the left-hand side of the equal sign,
        is or includes an actual object 
        and is not simply the name of a variable.
        
        

SyntaxError - import X from Y
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error11.py", line 3
        import pen from turtle
                      ^
    SyntaxError: invalid syntax
    
        Did you mean `from turtle import pen`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error11.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: import pen from turtle
                        ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You wrote something like
        
            import pen from turtle
        instead of
        
            from turtle import pen
        
        
        

SyntaxError - EOL while scanning string literal
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error12.py", line 3
        alphabet = 'abc
                       ^
    SyntaxError: EOL while scanning string literal
    
        Did you forget a closing quote?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error12.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: EOL while scanning string literal"""
       2: 
    -->3: alphabet = 'abc
                         ^

        You starting writing a string with a single or double quote
        but never ended the string with another quote on that line.
        

SyntaxError - assignment to keyword (None)
------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error13.py", line 4
        None = 1
       ^
    SyntaxError: can't assign to keyword
    
        You cannot assign a value to `None`.
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error13.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: cannot assign to None in Py 3.8
       2:    and can't assign to keyword before."""
       3: 
    -->4: None = 1
         ^

        `None` is a constant in Python; you cannot assign it a value.
        
        

SyntaxError - assignment to keyword (__debug__)
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error14.py", line 4
        __debug__ = 1
       ^
    SyntaxError: assignment to keyword
    
        You cannot assign a value to `__debug__`.
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error14.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: cannot assign to __debug__ in Py 3.8
       2:    and assignment to keyword before."""
       3: 
    -->4: __debug__ = 1
         ^

        `__debug__` is a constant in Python; you cannot assign it a value.
        
        

SyntaxError - unmatched closing parenthesis
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error15.py", line 6
        3, 4,))
              ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error15.py'
    beyond the location indicated by --> and ^.
    
       3: """
       4: a = (1,
       5:     2,
    -->6:     3, 4,))
                    ^
       7: b = 3

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The closing parenthesis `)` on line 6 does not match anything.
        
            6:     3, 4,))
                         ^
        

SyntaxError - unclosed parenthesis- 1
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error16.py", line 3
        if x == 1:
                 ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error16.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: x = int('1'
    -->3: if x == 1:
                   ^
       4:     print('yes')

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The opening parenthesis `(` on line 2 is not closed.
        
            2: x = int('1'
                      |
        

SyntaxError - unclosed parenthesis - 2
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error17.py", line 3
        d = a*a
        ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error17.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: a = (b+c
    -->3: d = a*a
          ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The opening parenthesis `(` on line 2 is not closed.
        
            2: a = (b+c
                   |
        

SyntaxError - mismatched brackets
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error18.py", line 2
        x = (1, 2, 3]
                    ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error18.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: x = (1, 2, 3]
                      ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The closing square bracket `]` on line 2 does not match the opening parenthesis `(` on line 2.
        
            2: x = (1, 2, 3]
                   ^       ^
        

SyntaxError - mismatched brackets - 2
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error19.py", line 4
        3]
         ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error19.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: x = (1,
       3:      2,
    -->4:      3]
                ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The closing square bracket `]` on line 4 does not match the opening parenthesis `(` on line 2.
        
            2: x = (1,
                   ^
            4:      3]
                     ^
        

SyntaxError - print is a function
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error20.py", line 2
        print 'hello'
                    ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print('hello')?
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error20.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: Missing parentheses in call to 'print' ..."""
    -->2: print 'hello'
                      ^

        Perhaps you need to type
        
             print('hello')
        
        In older version of Python, `print` was a keyword.
        Now, `print` is a function; you need to use parentheses to call it.
        

SyntaxError - Python keyword as function name
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error21.py", line 3
        def pass():
               ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error21.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: def pass():
                 ^
       4:     print("keyword as function name!")

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You tried to use the Python keyword `pass` as a function name.
        

SyntaxError - break outside loop
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error22.py", line 4
        break
       ^
    SyntaxError: 'break' outside loop
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error22.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: 'break' outside loop"""
       2: 
       3: if True:
    -->4:     break
             ^

        The Python keyword `break` can only be used inside a for loop or inside a while loop.
        

SyntaxError - continue outside loop
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error23.py", line 4
        continue
       ^
    SyntaxError: 'continue' not properly in loop
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error23.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: 'continue' outside loop"""
       2: 
       3: if True:
    -->4:     continue
             ^

        The Python keyword `continue` can only be used inside a for loop or inside a while loop.
        

SyntaxError - quote inside a string
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error24.py", line 3
        message = 'don't'
                       ^
    SyntaxError: invalid syntax
    
        Perhaps you misplaced a quote.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error24.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: message = 'don't'
                         ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        There appears to be a Python identifier (variable name)
        immediately following a string.
        I suspect that you were trying to use a quote inside a string
        that was enclosed in quotes of the same kind.
        

SyntaxError - missing comma in a dict
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error25.py", line 5
        'c': 3,
          ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error25.py'
    beyond the location indicated by --> and ^.
    
       2: 
       3: a = {'a': 1,
       4:      'b': 2
    -->5:      'c': 3,
                 ^
       6:      }

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The opening curly bracket `{` on line 3 is not closed.
        
            3: a = {'a': 1,
                   |
        It is also possible that you forgot a comma between items in a set or dict
        before the position indicated by --> and ^.
        

SyntaxError - missing comma in a set
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error26.py", line 3
        a = {1, 2  3}
                   ^
    SyntaxError: invalid syntax
    
        Did you forget something between `2` and `3`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error26.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = {1, 2  3}
                     ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        Python indicates that the error is caused by `3` written just after `2`.
        Perhaps you forgot a comma or an operator, like `+`, `*`, `in`, etc., between `2` and `3`.
        

SyntaxError - missing comma in a list
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error27.py", line 3
        a = [1, 2  3]
                   ^
    SyntaxError: invalid syntax
    
        Did you forget something between `2` and `3`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error27.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = [1, 2  3]
                     ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        Python indicates that the error is caused by `3` written just after `2`.
        Perhaps you forgot a comma or an operator, like `+`, `*`, `in`, etc., between `2` and `3`.
        

SyntaxError - missing comma in a tuple
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error28.py", line 3
        a = (1, 2  3)
                   ^
    SyntaxError: invalid syntax
    
        Did you forget something between `2` and `3`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error28.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = (1, 2  3)
                     ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        Python indicates that the error is caused by `3` written just after `2`.
        Perhaps you forgot a comma or an operator, like `+`, `*`, `in`, etc., between `2` and `3`.
        

SyntaxError - missing comma between function args
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error29.py", line 4
        def a(b, c d):
                   ^
    SyntaxError: invalid syntax
    
        Did you forget something between `c` and `d`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error29.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
       3: 
    -->4: def a(b, c d):
                     ^
       5:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        Python indicates that the error is caused by `d` written just after `c`.
        Perhaps you forgot a comma or an operator, like `+`, `*`, `in`, etc., between `c` and `d`.
        

SyntaxError - can't assign to function call - 1
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error30.py", line 6
        len('a') = 3
       ^
    SyntaxError: can't assign to function call
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error30.py'
    beyond the location indicated by --> and ^.
    
       3: Python 3.8: SyntaxError: cannot assign to function call
       4: """
       5: 
    -->6: len('a') = 3
         ^

        You wrote the expression
        
            len('a') = 3
        
        where `len('a')`, on the left-hand side of the equal sign, either is
        or includes a function call and is not simply the name of a variable.
        

SyntaxError - can't assign to function call - 2
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error31.py", line 6
        func(a, b=3) = 4
       ^
    SyntaxError: can't assign to function call
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error31.py'
    beyond the location indicated by --> and ^.
    
       3: Python 3.8: SyntaxError: cannot assign to function call
       4: """
       5: 
    -->6: func(a, b=3) = 4
         ^

        You wrote an expression like
        
            my_function(...) = some value
        
        where `my_function(...)`, on the left-hand side of the equal sign, is
        a function call and not the name of a variable.
        

SyntaxError - used equal sign instead of colon
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error32.py", line 4
        ages = {'Alice'=22, 'Bob'=24}
                       ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error32.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: """
       3: 
    -->4: ages = {'Alice'=22, 'Bob'=24}
                         ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        It is possible that you used an equal sign `=` instead of a colon `:`
        to assign values to keys in a dict
        before or at the position indicated by --> and ^.
        

SyntaxError - non-default argument follows default argument
-----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error33.py", line 5
        def test(a=1, b):
                ^
    SyntaxError: non-default argument follows default argument
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error33.py'
    beyond the location indicated by --> and ^.
    
       2: """
       3: 
       4: 
    -->5: def test(a=1, b):
                  ^
       6:     return a + b

        In Python, you can define functions with only positional arguments
        
            def test(a, b, c): ...
        
        or only keyword arguments
        
            def test(a=1, b=2, c=3): ...
        
        or a combination of the two
        
            def test(a, b, c=3): ...
        
        but with the keyword arguments appearing after all the positional ones.
        According to Python, you used positional arguments after keyword ones.
        

SyntaxError - positional argument follows keyword argument
----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error34.py", line 5
        test(a=1, b)
                 ^
    SyntaxError: positional argument follows keyword argument
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error34.py'
    beyond the location indicated by --> and ^.
    
       2: """
       3: 
       4: 
    -->5: test(a=1, b)
                   ^

        In Python, you can call functions with only positional arguments
        
            test(1, 2, 3)
        
        or only keyword arguments
        
            test(a=1, b=2, c=3)
        
        or a combination of the two
        
            test(1, 2, c=3)
        
        but with the keyword arguments appearing after all the positional ones.
        According to Python, you used positional arguments after keyword ones.
        

SyntaxError - f-string: unterminated string
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error35.py", line 4
        print(f"Bob is {age['Bob]} years old.")
             ^
    SyntaxError: f-string: unterminated string
    
        Perhaps you forgot a closing quote.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error35.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: f-string: unterminated string
       2: """
       3: 
    -->4: print(f"Bob is {age['Bob]} years old.")
               ^

        Inside an f-string, which is a string prefixed by the letter f, 
        you have another string, which starts with either a
        single quote (') or double quote ("), without a matching closing one.
        

SyntaxError - unclosed bracket
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error36.py", line 7
        print(foo())
            ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error36.py'
    beyond the location indicated by --> and ^.
    
        4: def foo():
        5:     return [1, 2, 3
        6: 
    --> 7: print(foo())
               ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The opening square bracket `[` on line 5 is not closed.
        
            5:     return [1, 2, 3
                          |
        

SyntaxError - unexpected EOF while parsing
------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error37.py", line 8
    SyntaxError: unexpected EOF while parsing
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error37.py'
    beyond the location indicated by --> and ^.
    
        5:     return [1, 2, 3,
        6: 
        7: print(foo())
    --> 8: 
           ^

        Python tells us that it reached the end of the file
        and expected more content.
        
        I will attempt to be give a bit more information.
        
        The opening square bracket `[` on line 5 is not closed.
        
            5:     return [1, 2, 3,
                          |
        

SyntaxError - name is parameter and global
------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error38.py", line 6
        global x
       ^
    SyntaxError: name 'x' is parameter and global
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error38.py'
    beyond the location indicated by --> and ^.
    
       3: 
       4: 
       5: def f(x):
    -->6:     global x
             ^

        You are including the statement
        
            `    global x`
        
        indicating that `x` is a variable defined outside a function.
        You are also using the same `x` as an argument for that
        function, thus indicating that it should be variable known only
        inside that function, which is the contrary of what `global` implied.
        

SyntaxError - keyword as attribute
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error39.py", line 12
        a.pass = 2
             ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error39.py'
    beyond the location indicated by --> and ^.
    
        9: a = A()
       10: 
       11: a.x = 1
    -->12: a.pass = 2
                ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You cannot use the Python keyword `pass` as an attribute.
        
        

SyntaxError - content passed continuation line character
--------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error40.py", line 5
        print(\t)
                 ^
    SyntaxError: unexpected character after line continuation character
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error40.py'
    beyond the location indicated by --> and ^.
    
       2: SyntaxError: unexpected character after line continuation character
       3: """
       4: 
    -->5: print(\t)
                   ^

        You are using the continuation character `\` outside of a string,
        and it is followed by some other character(s).
        I am guessing that you forgot to enclose some content in a string.
        
        

SyntaxError - keyword can't be an expression
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error41.py", line 7
        a = dict('key'=1)
                ^
    SyntaxError: keyword can't be an expression
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error41.py'
    beyond the location indicated by --> and ^.
    
        4: """
        5: 
        6: 
    --> 7: a = dict('key'=1)
                   ^

        You likely called a function with a named argument:
        
           `a_function(invalid=something)`
        
        where `invalid` is not a valid variable name in Python
        either because it starts with a number, or is a string,
        or contains a period, etc.
        
        

SyntaxError - invalid character in identifier
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error42.py", line 6
        🤖 = 'Reeborg'
        ^
    SyntaxError: invalid character in identifier
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error42.py'
    beyond the location indicated by --> and ^.
    
       3: 
       4: # Robot-face character below
       5: 
    -->6: 🤖 = 'Reeborg'
          ^

        You likely used some unicode character that is not allowed
        as part of a variable name in Python.
        This includes many emojis.
        
        

SyntaxError - keyword cannot be argument in def - 1
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error43.py", line 5
        def f(None=1):
                 ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error43.py'
    beyond the location indicated by --> and ^.
    
       2: """
       3: 
       4: 
    -->5: def f(None=1):
                   ^
       6:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        I am guessing that you tried to use the Python keyword
        `None` as an argument in the definition of a function.
        

SyntaxError - keyword cannot be argument in def - 2
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error44.py", line 5
        def f(x, True):
                    ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error44.py'
    beyond the location indicated by --> and ^.
    
       2: """
       3: 
       4: 
    -->5: def f(x, True):
                      ^
       6:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        I am guessing that you tried to use the Python keyword
        `True` as an argument in the definition of a function.
        

SyntaxError - keyword cannot be argument in def - 3
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error45.py", line 5
        def f(*None):
                  ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error45.py'
    beyond the location indicated by --> and ^.
    
       2: """
       3: 
       4: 
    -->5: def f(*None):
                    ^
       6:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        I am guessing that you tried to use the Python keyword
        `None` as an argument in the definition of a function.
        

SyntaxError - keyword cannot be argument in def - 4
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error46.py", line 5
        def f(**None):
                   ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error46.py'
    beyond the location indicated by --> and ^.
    
       2: """
       3: 
       4: 
    -->5: def f(**None):
                     ^
       6:     pass

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        I am guessing that you tried to use the Python keyword
        `None` as an argument in the definition of a function.
        

SyntaxError - delete function call
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error47.py", line 5
        del f(a)
           ^
    SyntaxError: can't delete function call
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error47.py'
    beyond the location indicated by --> and ^.
    
       2: """
       3: 
       4: 
    -->5: del f(a)
             ^

        You attempted to delete a function call
        
            del f(a)
        instead of deleting the function's name
        
            del f
        

SyntaxError - assigned prior to global declaration
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error48.py", line 7
        global p
       ^
    SyntaxError: name 'p' is assigned to before global declaration
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error48.py'
    beyond the location indicated by --> and ^.
    
        4: 
        5: def fn():
        6:     p = 1
    --> 7:     global p
              ^

        You assigned a value to the variable `p`
        before declaring it as a global variable.
        

SyntaxError - used prior to global declaration
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error49.py", line 7
        global r
       ^
    SyntaxError: name 'r' is used prior to global declaration
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error49.py'
    beyond the location indicated by --> and ^.
    
        4: 
        5: def fn():
        6:     print(r)
    --> 7:     global r
              ^

        You used the variable `r`
        before declaring it as a global variable.
        

SyntaxError - assigned prior to nonlocal declaration
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error50.py", line 9
        nonlocal q
       ^
    SyntaxError: name 'q' is used prior to nonlocal declaration
    
        Did you forget to write `nonlocal` first?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error50.py'
    beyond the location indicated by --> and ^.
    
        6: 
        7:     def g():
        8:         print(q)
    --> 9:         nonlocal q
                  ^

        You used the variable `q`
        before declaring it as a nonlocal variable.
        

SyntaxError - used prior to nonlocal declaration
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error51.py", line 9
        nonlocal s
       ^
    SyntaxError: name 's' is assigned to before nonlocal declaration
    
        Did you forget to add `nonlocal`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error51.py'
    beyond the location indicated by --> and ^.
    
        6: 
        7:     def g():
        8:         s = 2
    --> 9:         nonlocal s
                  ^

        You assigned a value to the variable `s`
        before declaring it as a nonlocal variable.
        

SyntaxError - named assignment with Python constant
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error55.py", line 4
        (True := 1)
              ^
    SyntaxError: invalid syntax
    
        Your Python version might be too old.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error55.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: or (Python 3.8) cannot use named assignment with True"""
       3: 
    -->4: (True := 1)
                ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You appear to be using the operator `:=`, sometimes called
        the walrus operator. This operator requires the use of
        Python 3.8 or newer. You are using version 3.7.
        

SyntaxError - assignment to operator
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error56.py", line 4
        a + 1 = 2
       ^
    SyntaxError: can't assign to operator
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error56.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: can't assign to operator
       2: or (Python 3.8) cannot assign to operator"""
       3: 
    -->4: a + 1 = 2
         ^

        You wrote an expression that includes some mathematical operations
        on the left-hand side of the equal sign which should be
        only used to assign a value to a variable.
        

SyntaxError - using the backquote character
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error57.py", line 3
        a = `1`
            ^
    SyntaxError: invalid syntax
    
        You should not use the backquote character.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error57.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = `1`
              ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You are using the backquote character.
        Either you meant to write a single quote, ', or copied Python 2 code;
        in this latter case, use the function `repr(x)`.

SyntaxError - assign to generator expression
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error58.py", line 3
        (x for x in x) = 1
       ^
    SyntaxError: can't assign to generator expression
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error58.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: can't [cannot] assign to generator expression"""
       2: 
    -->3: (x for x in x) = 1
         ^

        On the left-hand side of an equal sign, you have a
        generator expression instead of the name of a variable.
        

SyntaxError - assign to conditional expression
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error59.py", line 3
        a if 1 else b = 1
       ^
    SyntaxError: can't assign to conditional expression
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error59.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: can't [cannot] assign to conditional expression"""
       2: 
    -->3: a if 1 else b = 1
         ^

        On the left-hand side of an equal sign, you have a
        conditional expression instead of the name of a variable.
        A conditional expression has the following form:
        
            variable = object if condition else other_object

SyntaxError - name is parameter and nonlocal
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error60.py", line 5
        nonlocal x
       ^
    SyntaxError: name 'x' is parameter and nonlocal
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error60.py'
    beyond the location indicated by --> and ^.
    
       2: 
       3: 
       4: def f(x):
    -->5:     nonlocal x
             ^

        You used `x` as a parameter for a function
        before declaring it also as a nonlocal variable:
        `x` cannot be both at the same time.
        

SyntaxError - name is global and nonlocal
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error61.py", line 7
        global xy
       ^
    SyntaxError: name 'xy' is nonlocal and global
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error61.py'
    beyond the location indicated by --> and ^.
    
        4: 
        5: 
        6: def f():
    --> 7:     global xy
              ^
        8:     nonlocal xy

        You declared `xy` as being both a global and nonlocal variable.
        A variable can be global, or nonlocal, but not both at the same time.
        

SyntaxError - nonlocal variable not found
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error62.py", line 5
        nonlocal ab
       ^
    SyntaxError: no binding for nonlocal 'ab' found
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error62.py'
    beyond the location indicated by --> and ^.
    
       2: 
       3: 
       4: def f():
    -->5:     nonlocal ab
             ^

        You declared the variable `ab` as being a
        nonlocal variable but it cannot be found.
        

SyntaxError - nonlocal variable not found at module level
---------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error63.py", line 4
        nonlocal cd
       ^
    SyntaxError: nonlocal declaration not allowed at module level
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error63.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError:  nonlocal declaration not allowed at module level"""
       2: 
       3: 
    -->4: nonlocal cd
         ^

        You used the nonlocal keyword at a module level.
        The nonlocal keyword refers to a variable inside a function
        given a value outside that function.

SyntaxError - keyword arg only once in function definition
----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error64.py", line 4
        def f(aa=1, aa=2):
       ^
    SyntaxError: duplicate argument 'aa' in function definition
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error64.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: duplicate argument 'aa' in function definition"""
       2: 
       3: 
    -->4: def f(aa=1, aa=2):
         ^
       5:     pass

        You have defined a function repeating the keyword argument
        
            aa
        twice; each keyword argument should appear only once in a function definition.
        

SyntaxError - keyword arg only once in function call
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error65.py", line 4
        f(ad=1, ad=2)
               ^
    SyntaxError: keyword argument repeated
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error65.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError:  keyword argument repeated"""
       2: 
       3: 
    -->4: f(ad=1, ad=2)
                 ^

        You have called a function repeating the same keyword argument.
        Each keyword argument should appear only once in a function call.
        

SyntaxError - unexpected EOF while parsing 2
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error66.py", line 4
    SyntaxError: unexpected EOF while parsing
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error66.py'
    beyond the location indicated by --> and ^.
    
       1: '''Should raise SyntaxError: unexpected EOF while parsing'''
       2: 
       3: for i in range(10):
    -->4: 
          ^

        Python tells us that it reached the end of the file
        and expected more content.
        
        

SyntaxError - print is a function 2
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error67.py", line 2
        print len('hello')
                ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error67.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: print len('hello')
                  ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        In older version of Python, `print` was a keyword.
        Now, `print` is a function; you need to use parentheses to call it.
        

SyntaxError - copy/paste from interpreter
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error68.py", line 2
        >>> print("Hello World!")
         ^
    SyntaxError: invalid syntax
    
        Did you use copy-paste?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error68.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: >>> print("Hello World!")
           ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        It looks like you copy-pasted code from an interactive interpreter.
        The Python prompt, `>>>`, should not be included in your code.
        

SyntaxError - Using pip from interpreter
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error69.py", line 2
        pip install friendly
                  ^
    SyntaxError: invalid syntax
    
        Pip cannot be used in a Python interpreter.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error69.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: pip install friendly
                    ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        It looks as if you are attempting to use pip to install a module.
        `pip` is a command that needs to run in a terminal,
        not from a Python interpreter.
        

SyntaxError - Using pip from interpreter 2
------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error70.py", line 2
        python -m pip install friendly
                    ^
    SyntaxError: invalid syntax
    
        Pip cannot be used in a Python interpreter.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error70.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: python -m pip install friendly
                      ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        It looks as if you are attempting to use pip to install a module.
        `pip` is a command that needs to run in a terminal,
        not from a Python interpreter.
        

SyntaxError - dot followed by parenthesis
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error71.py", line 2
        print(len.('hello'))
                  ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error71.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: print(len.('hello'))
                    ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You cannot have a dot `.` followed by `(`.
        

SyntaxError - cannot assign to f-string
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error72.py", line 6
        f'{x}' = 42
       ^
    SyntaxError: can't assign to literal
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error72.py'
    beyond the location indicated by --> and ^.
    
       3: Python >= 3.8: SyntaxError: cannot assign to f-string expression
       4: """
       5: 
    -->6: f'{x}' = 42
         ^

        You wrote an expression that has an f-string
        on the left-hand side of the equal sign.
        An f-string should only appear on the right-hand side of the equal sign.
        

SyntaxError - raising multiple exceptions
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error73.py", line 2
        raise X, Y
               ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error73.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: raise X, Y
                 ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        It looks like you are trying to raise an exception using Python 2 syntax.
        

SyntaxError - parenthesis around generator expression
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error74.py", line 6
        f(x for x in L, 1)
         ^
    SyntaxError: Generator expression must be parenthesized
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error74.py'
    beyond the location indicated by --> and ^.
    
       3:     return list(it)
       4: 
       5: L = range(10)
    -->6: f(x for x in L, 1)
           ^

        You are using a generator expression, something of the form
            `x for x in thing`
        You must add parentheses enclosing that expression.
        

SyntaxError - invalid character (bad quote)
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error75.py", line 3
        a = « hello »
            ^
    SyntaxError: invalid character in identifier
    
        Did you mean to use a normal quote character, `'` or `"`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error75.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid character in identifier for Python <=3.8
       2:    and  SyntaxError: invalid character '«' (U+00AB) in Python 3.9"""
    -->3: a = « hello »
              ^

        Python indicates that you used some unicode characters not allowed
        as part of a variable name; this includes many emojis.
        However, I suspect that you used a fancy unicode quotation mark
        instead of a normal single or double quote for a string.
        This can happen if you copy-pasted code.
        
        

SyntaxError - single = instead of double == with if
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error76.py", line 3
        if i % 2 = 0:
                 ^
    SyntaxError: invalid syntax
    
        Perhaps you needed `==` instead of `=`.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error76.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: for i in range(101):
    -->3:     if i % 2 = 0:
                       ^
       4:         print(i)

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You used an assignment operator `=` instead of an equality operator `==` 
        with an `if` statement.
        

SyntaxError - single = instead of double == with elif
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error77.py", line 5
        elif i % 2 = 0:
                   ^
    SyntaxError: invalid syntax
    
        Perhaps you needed `==` instead of `=`.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error77.py'
    beyond the location indicated by --> and ^.
    
       2: for i in range(101):
       3:     if False:
       4:         pass
    -->5:     elif i % 2 = 0:
                         ^
       6:         print(i)

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You used an assignment operator `=` instead of an equality operator `==` 
        with an `elif` statement.
        

SyntaxError - single = instead of double == with while
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error78.py", line 4
        while a = 1:
                ^
    SyntaxError: invalid syntax
    
        Perhaps you needed `==` instead of `=`.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error78.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: a = 1
       3: 
    -->4: while a = 1:
                  ^
       5:     a = 2

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You used an assignment operator `=` instead of an equality operator `==` 
        with a `while` statement.
        

SyntaxError - forgot a comma in an f-string
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "<fstring>", line 1
        (x y)
           ^
    SyntaxError: invalid syntax
    
        Did you forget something between `x` and `y`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    '<fstring>'
    beyond the location indicated by --> and ^.
    
    -->1: (x y)
             ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        Python indicates that the error is caused by `y` written just after `x`.
        Perhaps you forgot a comma or an operator, like `+`, `*`, `in`, etc., between `x` and `y`.
        

SyntaxError - Valid names cannot begin with a number
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error80.py", line 3
        36abc = 3
            ^
    SyntaxError: invalid syntax
    
        Valid names cannot begin with a number.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error80.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: 36abc = 3
              ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        Valid names cannot begin with a number.
        

SyntaxError - unclosed parenthesis - 3
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error81.py", line 7
        if 2:
            ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error81.py'
    beyond the location indicated by --> and ^.
    
        4:     if 1:
        5:         print(((123))
        6: 
    --> 7: if 2:
               ^
        8:     print(123))

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The opening parenthesis `(` on line 5 is not closed.
        
            5:         print(((123))
                            |
        

SyntaxError - forgot a multiplication operator
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error82.py", line 3
        tau = 2pi
                ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot a multiplication operator, `2 * pi`.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error82.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: tau = 2pi
                  ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        Valid names cannot begin with a number.
        Perhaps you forgot a multiplication operator, `2 * pi`.
        

SyntaxError - space between names
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error83.py", line 4
        a-b = 2
       ^
    SyntaxError: can't assign to operator
    
        Did you mean `a_b`?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error83.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: can't assign to operator
       2: or (Python 3.8) cannot assign to operator"""
       3: 
    -->4: a-b = 2
         ^

        You wrote an expression that includes some mathematical operations
        on the left-hand side of the equal sign which should be
        only used to assign a value to a variable.
        Perhaps you meant to write `a_b` instead of `a-b`
        

SyntaxError - can't use star operator
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error84.py", line 3
        *a
       ^
    SyntaxError: can't use starred expression here
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error84.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: can't use starred expression here"""
       2: 
    -->3: *a
         ^

        The star operator `*` is interpreted to mean that
        iterable unpacking is to be used to assign a name
        to each item of an iterable, which does not make sense here.
        

SyntaxError - can't use double star operator
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "<fstring>", line 1
        (**k)
          ^
    SyntaxError: invalid syntax
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    '<fstring>'
    beyond the location indicated by --> and ^.
    
    -->1: (**k)
            ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        The double star operator `**` is likely interpreted to mean that
        dict unpacking is to be used which does not make sense here.
        

SyntaxError - can't use return outside function
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error86.py", line 3
        return
       ^
    SyntaxError: 'return' outside function
    
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error86.py'
    beyond the location indicated by --> and ^.
    
       1: """Should raise SyntaxError: 'return' outside function"""
       2: 
    -->3: return
         ^

        You can only use a `return` statement inside a function or method.
        

SyntaxError - too many nested blocks
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "None", line None
    SyntaxError: too many statically nested blocks
    
        Seriously?
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
        You cannot be serious!
        
        In case this is a mistake in a real program, please
        consider reducing the number of nested code blocks.
        

Walrus operator does not exist - yet
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 143, in create_tracebacks
        mod = __import__(name)
      File "TESTS:\syntax\raise_syntax_error_walrus.py", line 3
        print(walrus := True)
                     ^
    SyntaxError: invalid syntax
    
        Your Python version might be too old.
        
    A `SyntaxError` occurs when Python cannot understand your code.
    
    Python could not understand the code in the file
    'TESTS:\syntax\raise_syntax_error_walrus.py'
    beyond the location indicated by --> and ^.
    
       1: """Prior to Python 3.8, this should raise SyntaxError: invalid syntax"""
       2: 
    -->3: print(walrus := True)
                       ^

        I make an effort below to guess what caused the problem
        but I might guess incorrectly.
        
        You appear to be using the operator `:=`, sometimes called
        the walrus operator. This operator requires the use of
        Python 3.8 or newer. You are using version 3.7.
        
