
Friendly tracebacks - in English
======================================

Friendly-traceback aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Ideally, an example of each case handled by friendly-traceback
should be included here.

.. note::

     The content of this page is generated by running
     trb_english.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.2.7a
Python version: 3.8.4



ArithmeticError
---------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_arithmetic_error.py", line 9, in test_arithmetic_error
        raise ArithmeticError('error')
    ArithmeticError: error
    
    `ArithmeticError` is the base class for those built-in exceptions
    that are raised for various arithmetic errors.
    It is unusual that you are seeing this exception;
    normally, a more specific exception should have been raised.
    
    Exception raised on line 9 of file TESTS:\runtime\test_arithmetic_error.py.
    
        7:         # Usually, a subclass such as ZeroDivisionError, etc., would
        8:         # likely be raised.
    --> 9:         raise ArithmeticError('error')
       10:     except Exception as e:


AttributeError - class attribute
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 35, in test_attribute_error
        a.x  # Testing instance
    AttributeError: 'A' object has no attribute 'x'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        The object `a` has no attribute named `x`.
        
    Exception raised on line 35 of file TESTS:\runtime\test_attribute_error.py.
    
       33:     try:
       34:         a = A()
    -->35:         a.x  # Testing instance
       36:     except Exception as e:

            a: <A object> from test_attribute_error.test_attribute_error
        


AttributeError - typo in module attribute
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 66, in test_misspelled_module_attribute
        string.ascii_lowecase
    AttributeError: module 'string' has no attribute 'ascii_lowecase'
    
        Did you mean `ascii_lowercase`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        Perhaps you meant to write `string.ascii_lowercase` instead of `string.ascii_lowecase`
        
    Exception raised on line 66 of file TESTS:\runtime\test_attribute_error.py.
    
       64: 
       65:     try:
    -->66:         string.ascii_lowecase
       67:     except Exception as e:

            string: <module string> from PYTHON_LIB:\string.py
        


AttributeError - typo in module attribute 2
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 82, in test_misspelled_module_attribute_2
        math.cost
    AttributeError: module 'math' has no attribute 'cost'
    
        Did you mean one of the following: `cos, cosh, acos`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        Instead of writing `math.cost`, perhaps you meant to write one of 
        the following names which are attributes of module `math`:
        `cos, cosh, acos`
        
    Exception raised on line 82 of file TESTS:\runtime\test_attribute_error.py.
    
       80: 
       81:     try:
    -->82:         math.cost
       83:     except Exception as e:

            math: <module math (builtin)>
        


FileNotFoundError
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 6, in test_file_not_found_error
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    A `FileNotFoundError` exception indicates that you
    are trying to open a file that cannot be found by Python.
    This could be because you misspelled the name of the file.
    
        In your program, the name of the
        file that cannot be found is `does_not_exist`.
        
    Exception raised on line 6 of file TESTS:\runtime\test_file_not_found_error.py.
    
       4: def test_file_not_found_error():
       5:     try:
    -->6:         open("does_not_exist")
       7:     except Exception as e:


ImportError
-----------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 6, in test_import_error
        from math import Pi
    ImportError: cannot import name 'Pi' from 'math' (unknown location)
    
        Did you mean `pi`?
        
    An `ImportError` exception indicates that a certain object could not
    be imported from a module or package. Most often, this is
    because the name of the object is not spelled correctly.
    
        Perhaps you meant to import `pi` (from `math`) instead of `Pi`
        
    Exception raised on line 6 of file TESTS:\runtime\test_import_error.py.
    
       4: def test_import_error():
       5:     try:
    -->6:         from math import Pi
       7:     except Exception as e:


KeyError
--------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 7, in test_key_error
        d["c"]
    KeyError: 'c'
    
    A `KeyError` is raised when a value is not found as a
    key in a Python dict.
    
        In your program, the key that cannot be found is `'c'`.
        
    Exception raised on line 7 of file TESTS:\runtime\test_key_error.py.
    
       5:     d = {"a": 1, "b": 2}
       6:     try:
    -->7:         d["c"]
       8:     except Exception as e:

            d: {'a': 1, 'b': 2}
        


LookupError
-----------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_lookup_error.py", line 10, in test_lookup_error
        raise LookupError("Fake message")
    LookupError: Fake message
    
    `LookupError` is the base class for the exceptions that are raised
    when a key or index used on a mapping or sequence is invalid.
    It can also be raised directly by codecs.lookup().
    
    Exception raised on line 10 of file TESTS:\runtime\test_lookup_error.py.
    
        8:         # other than possibly codecs.lookup(), which is why we raise
        9:         # it directly here for our example.
    -->10:         raise LookupError("Fake message")
       11:     except Exception as e:


IndexError - short tuple
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 8, in test_index_error1
        print(a[3], b[2])
    IndexError: tuple index out of range
    
    An `IndexError` occurs when you are try to get an item from a list,
    a tuple, or a similar object (sequence), by using an index which
    does not exists; typically, this is because the index you give
    is greater than the length of the sequence.
    Reminder: the first item of a sequence is at index 0.
    
    Exception raised on line 8 of file TESTS:\runtime\test_index_error.py.
    
        6:     b = [1, 2, 3]
        7:     try:
    --> 8:         print(a[3], b[2])
                         ^^^^
        9:     except Exception as e:

            a: (1, 2, 3)
        


IndexError - long list
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 22, in test_index_error2
        print(a[50], b[0])
    IndexError: list index out of range
    
    An `IndexError` occurs when you are try to get an item from a list,
    a tuple, or a similar object (sequence), by using an index which
    does not exists; typically, this is because the index you give
    is greater than the length of the sequence.
    Reminder: the first item of a sequence is at index 0.
    
    Exception raised on line 22 of file TESTS:\runtime\test_index_error.py.
    
       20:     b = tuple(range(50))
       21:     try:
    -->22:         print(a[50], b[0])
                         ^^^^^
       23:     except Exception as e:

            a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
        


ModuleNotFoundError
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 6, in test_module_not_found_error
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        Did you mean `tkinter`?
        
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
        The name of the module that could not be imported is `Tkinter`.
        `tkinter` is an existing module that has a similar name.
        
    Exception raised on line 6 of file TESTS:\runtime\test_module_not_found_error.py.
    
       4: def test_module_not_found_error():
       5:     try:
    -->6:         import Tkinter
       7:     except Exception as e:


NameError - 1
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 6, in test_name_error
        this = something
    NameError: name 'something' is not defined
    
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `something` is an unknown name.
        I have no additional information for you.
    Exception raised on line 6 of file TESTS:\runtime\test_name_error.py.
    
       4: def test_name_error():
       5:     try:
    -->6:         this = something
       7:     except Exception as e:


NameError - 2
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 20, in test_name_error2
        x = babs(-1)
    NameError: name 'babs' is not defined
    
        Did you mean `abs`?
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `babs` is an unknown name.
        Instead of writing `babs`, perhaps you meant one of the following:
        *   Local scope: `nabs`
        *   Global scope: `fabs`
        *   Python builtins: `abs`
        
    Exception raised on line 20 of file TESTS:\runtime\test_name_error.py.
    
       18:     nabs = 1
       19:     try:
    -->20:         x = babs(-1)
       21:     except Exception as e:


NameError - 3
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 35, in test_name_error3
        y = x
    NameError: name 'x' is not defined
    
        Did you use a colon instead of an equal sign?
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `x` is an unknown name.
        A type hint found for `x` in the global scope.
        Perhaps you had used a colon instead of an equal sign and written
        
            x : 3
        
        instead of
        
            x = 3
        
    Exception raised on line 35 of file TESTS:\runtime\test_name_error.py.
    
       33: def test_name_error3():
       34:     try:
    -->35:         y = x
       36:     except Exception as e:


NameError - 4
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 48, in test_name_error4
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined
    
        Did you mean `cos`?
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
        In your program, `cost` is an unknown name.
        Instead of writing `cost`, perhaps you meant one of the following:
        *   Global scope: `cos`, `cosh`, `acos`
        
    Exception raised on line 48 of file TESTS:\runtime\test_name_error.py.
    
       46: def test_name_error4():
       47:     try:
    -->48:         cost  # wrote from math import * above
       49:     except Exception as e:


OverflowError
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 6, in test_overflow_error
        2.0 ** 1600
    OverflowError: (34, 'Result too large')
    
    An `OverflowError` is raised when the result of an arithmetic operation
    is too large to be handled by the computer's processor.
    
    Exception raised on line 6 of file TESTS:\runtime\test_overflow_error.py.
    
       4: def test_overflow_error():
       5:     try:
    -->6:         2.0 ** 1600
       7:     except Exception as e:


RecursionError
--------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_recursion_error.py", line 8, in test_function_recursion_error
        a()
    
           ... More lines not shown. ...
    
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
    RecursionError: maximum recursion depth exceeded
    
    A `RecursionError` is raised when a function calls itself,
    directly or indirectly, too many times.
    It almost always indicates that you made an error in your code
    and that your program would never stop.
    
    Execution stopped on line 8 of file TESTS:\runtime\test_recursion_error.py.
    
        6:         return a()
        7:     try:
    --> 8:         a()
        9:     except Exception as e:

            a: <function a> from test_function_recursion_error
        
    Exception raised on line 6 of file TESTS:\runtime\test_recursion_error.py.
    
       4: def test_function_recursion_error():
       5:     def a():
    -->6:         return a()
                         ^^^
       7:     try:

            a: <function a> from test_function_recursion_error
        


TypeError - 1: concatenate two different types
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 38, in test_type_error1
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to concatenate (add) two different types of objects:
        a `tuple` and a `list`
        
    Exception raised on line 38 of file TESTS:\runtime\test_type_error.py.
    
       36:         a_tuple = (1, 2, 3)
       37:         a_list = [1, 2, 3]
    -->38:         result = a_tuple + a_list
                            ^^^^^^^^^^^^^^^^
       39:     except Exception as e:

            a_tuple: (1, 2, 3)
            a_list: [1, 2, 3]
        


TypeError - 2: unsupported operand type(s) for +=
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 95, in test_type_error2
        b -= a
    TypeError: unsupported operand type(s) for -=: 'list' and 'tuple'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to subtract two incompatible types of objects:
        a `list` and a `tuple`
        
    Exception raised on line 95 of file TESTS:\runtime\test_type_error.py.
    
       93:         a = (1, 2)
       94:         b = [3, 4]
    -->95:         b -= a
       96:     except Exception as e:

            b: [3, 4]
            a: (1, 2)
        


TypeError - 3: unsupported operand type(s) for -=
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_common.py", line 163, in create_tracebacks
        result, message = getattr(mod, function)()
    AttributeError: module 'test_type_error' has no attribute 'test_type_error3'
    
        Did you mean one of the following: `test_type_error13, test_type_error9, test_type_error8, test_type_error7, test_type_error6`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
        Instead of writing `test_type_error.test_type_error3`, perhaps you meant to write one of 
        the following names which are attributes of module `test_type_error`:
        `test_type_error13, test_type_error9, test_type_error8, test_type_error7, test_type_error6`
        
    Exception raised on line 163 of file TESTS:\trb_common.py.
    
       161:                     mod = __import__(name)
       162:                     if function is not None:
    -->163:                         result, message = getattr(mod, function)()
                                                      ^^^^^^^^^^^^^^^^^^^^^^
       164:                         save_messages[function] = message

            mod: <module test_type_error> from TESTS:\runtime\test_type_error.py
            function: 'test_type_error3'
        

TypeError - 4: unsupported operand type(s) for ``*=``
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 124, in test_type_error4
        b *= a
    TypeError: unsupported operand type(s) for *=: 'set' and 'complex'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to multiply two incompatible types of objects:
        a `set` and a complex number
        
    Exception raised on line 124 of file TESTS:\runtime\test_type_error.py.
    
       122:         a = 1j
       123:         b = {2, 3}
    -->124:         b *= a
       125:     except Exception as e:

            b: {2, 3}
            a: 1j
        


TypeError - 5: unsupported operand type(s) for //=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 179, in test_type_error5
        b //= a
    TypeError: unsupported operand type(s) for //=: 'float' and 'dict'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to divide two incompatible types of objects:
        a number (`float`) and a dictionary (`dict`)
        
    Exception raised on line 179 of file TESTS:\runtime\test_type_error.py.
    
       177:         a = {1: 1, 2: 2}
       178:         b = 3.1416
    -->179:         b //= a
       180:     except Exception as e:

            b: 3.1416
            a: {1: 1, 2: 2}
        


TypeError - 6: unsupported operand type(s) for &=
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 208, in test_type_error6
        b &= a
    TypeError: unsupported operand type(s) for &=: 'int' and 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to perform the bitwise operation &=
        on two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 208 of file TESTS:\runtime\test_type_error.py.
    
       206:         a = "a"
       207:         b = 2
    -->208:         b &= a
       209:     except Exception as e:

            b: 2
            a: 'a'
        


TypeError - 7: unsupported operand type(s) for ``**=``
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 237, in test_type_error7
        a **= b
    TypeError: unsupported operand type(s) for ** or pow(): 'dict' and 'float'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to exponentiate (raise to a power)
        using two incompatible types of objects:
        a dictionary (`dict`) and a number (`float`)
        
    Exception raised on line 237 of file TESTS:\runtime\test_type_error.py.
    
       235:         a = {1: 1, 2: 2}
       236:         b = 3.1416
    -->237:         a **= b
       238:     except Exception as e:

            a: {1: 1, 2: 2}
            b: 3.1416
        


TypeError - 8: unsupported operand type(s) for >>=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 266, in test_type_error8
        a >>= b
    TypeError: unsupported operand type(s) for >>=: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to perform the bit shifting operation >>=
        on two incompatible types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 266 of file TESTS:\runtime\test_type_error.py.
    
       264:         a = "a"
       265:         b = 42
    -->266:         a >>= b
       267:     except Exception as e:

            a: 'a'
            b: 42
        


TypeError - 9: unsupported operand type(s) for @=
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 295, in test_type_error9
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to use the operator @=
        using two incompatible types of objects:
        a string (`str`) and an integer (`int`).
        This operator is normally used only
        for multiplication of matrices.
        
    Exception raised on line 295 of file TESTS:\runtime\test_type_error.py.
    
       293:         a = "a"
       294:         b = 2
    -->295:         a @= b
       296:     except Exception as e:

            a: 'a'
            b: 2
        


TypeError - 10: comparison between incompatible types
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 311, in test_type_error10
        b < a
    TypeError: '<' not supported between instances of 'int' and 'str'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to do an order comparison (<)
        between two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 311 of file TESTS:\runtime\test_type_error.py.
    
       309:         a = "a"
       310:         b = 42
    -->311:         b < a
       312:     except Exception as e:

            b: 42
            a: 'a'
        


TypeError - 11: bad operand type for unary ~
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 349, in test_type_error11
        a = ~(1, 2, 3)
    TypeError: bad operand type for unary ~: 'tuple'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You tried to use the unary operator '~'
        with the following type of object: a `tuple`.
        This operation is not defined for this type of object.
        
    Exception raised on line 349 of file TESTS:\runtime\test_type_error.py.
    
       347: 
       348:     try:
    -->349:         a = ~(1, 2, 3)
                        ^^^^^^^^^^
       350:         print(a)


TypeError - 12: object does not support item assignment
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 365, in test_type_error12
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        In Python, some objects are known as immutable:
        once defined, their value cannot be changed.
        You tried change part of such an immutable object: a `tuple`,
        most likely by using an indexing operation.
        
    Exception raised on line 365 of file TESTS:\runtime\test_type_error.py.
    
       363:     a = (1, 2, 3)
       364:     try:
    -->365:         a[0] = 0
       366:     except Exception as e:

            a[0]: 1
            a: (1, 2, 3)
        


TypeError - 13: wrong number of positional arguments
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 398, in test_type_error13
        A().f(1)
    TypeError: f() takes 1 positional argument but 2 were given
    
        Perhaps you forgot `self` when defining `f`.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You apparently have called the function `f` with
        2 positional argument(s) while it requires 1
        such positional argument(s).
        Perhaps you forgot `self` when defining `f`.
        
    Exception raised on line 398 of file TESTS:\runtime\test_type_error.py.
    
       396: 
       397:     try:
    -->398:         A().f(1)
       399:     except Exception as e:

            A: <class A> from test_type_error.test_type_error13
        


TypeError - 14: missing positional arguments
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 417, in test_type_error14
        fn(1)
    TypeError: fn() missing 2 required positional arguments: 'b' and 'c'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        You apparently have called the function 'fn()' with
        fewer positional arguments than it requires (2 missing).
        
    Exception raised on line 417 of file TESTS:\runtime\test_type_error.py.
    
       415: 
       416:     try:
    -->417:         fn(1)
       418:     except Exception as e:

            fn: <function fn> from test_type_error14
        


TypeError - 15: list object is not callable
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 443, in test_type_error15
        _ = [1, 2](3, 4)
    TypeError: 'list' object is not callable
    
        Perhaps you had a missing comma before the tuple.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        I suspect that you had an object of this type, a `list`,
        followed by what looked like a tuple, '(...)',
        which Python took as an indication of a function call.
        Perhaps you had a missing comma before the tuple.
        
    Exception raised on line 443 of file TESTS:\runtime\test_type_error.py.
    
       441: 
       442:     try:
    -->443:         _ = [1, 2](3, 4)
                        ^^^^^^^^^^^^
       444:     except Exception as e:


TypeError - 16: exception derived from BaseException
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 456, in test_type_error16
        raise "exception"
    TypeError: exceptions must derive from BaseException
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by tring to do an operation not allowed on a given type of object.
    
        In Python 3, exceptions must be derived from BaseException.
        
    Exception raised on line 456 of file TESTS:\runtime\test_type_error.py.
    
       454: def test_type_error16():
       455:     try:
    -->456:         raise "exception"
       457:     except Exception as e:


UnboundLocalError - 1: missing global
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_unbound_local_error_missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 11, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        Did you forget to add `global spam_missing_global`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
        The name `spam_missing_global` exists in the global scope.
        Perhaps the statement
        
            global spam_missing_global
        
        should have been included as the first line inside your function.
        
    Execution stopped on line 27 of file TESTS:\runtime\test_unbound_local_error.py.
    
       25: 
       26:     try:
    -->27:         outer_missing_global()
       28:     except Exception as e:

            global outer_missing_global: <function outer_missing_global>
        
    Exception raised on line 9 of file TESTS:\runtime\test_unbound_local_error.py.
    
        7: def outer_missing_global():
        8:     def inner():
    --> 9:         spam_missing_global += 1

            global spam_missing_global: 1
        


UnboundLocalError - 2: missing nonlocal
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 48, in test_unbound_local_error_missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 20, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 18, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        Did you forget to add `nonlocal spam_missing_nonlocal`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
        The name `spam_missing_nonlocal` exists in the nonlocal scope.
        Perhaps the statement
        
            nonlocal spam_missing_nonlocal
        
        should have been included as the first line inside your function.
        
    Execution stopped on line 48 of file TESTS:\runtime\test_unbound_local_error.py.
    
       46: 
       47:     try:
    -->48:         outer_missing_nonlocal()
       49:     except Exception as e:

            global outer_missing_nonlocal: <function outer_missing_nonlocal>
        
    Exception raised on line 18 of file TESTS:\runtime\test_unbound_local_error.py.
    
       16: 
       17:     def inner():
    -->18:         spam_missing_nonlocal += 1


Unknown exception
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unknown_error.py", line 10, in test_function_unknown_error
        raise MyException("Some informative message about an unknown exception.")
    MyException: Some informative message about an unknown exception.
    
    No information is available about this exception.
    
    Exception raised on line 10 of file TESTS:\runtime\test_unknown_error.py.
    
        8: def test_function_unknown_error():
        9:     try:
    -->10:         raise MyException("Some informative message about an unknown exception.")
       11:     except Exception as e:

            global MyException: <class test_unknown_error.MyException>
        


ZeroDivisionError - 1
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 6, in test_zero_division_error
        1 / 0
    ZeroDivisionError: division by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide
    a value by zero:
        `result = my_variable / 0.`
    It can also happen if you calculate the remainder of a division
    using the modulo operator `%`:
        `result = my_variable % 0`
    
    Exception raised on line 6 of file TESTS:\runtime\test_zero_division_error.py.
    
       4: def test_zero_division_error():
       5:     try:
    -->6:         1 / 0
       7:     except Exception as e:


ZeroDivisionError - 2
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 21, in test_zero_division_error2
        1 % zero
    ZeroDivisionError: integer division or modulo by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide
    a value by zero:
        `result = my_variable / 0.`
    It can also happen if you calculate the remainder of a division
    using the modulo operator `%`:
        `result = my_variable % 0`
    
    Exception raised on line 21 of file TESTS:\runtime\test_zero_division_error.py.
    
       19:     zero = 0
       20:     try:
    -->21:         1 % zero
       22:     except Exception as e:

            zero: 0
        

