
Friendly tracebacks - in English
======================================

Friendly-traceback aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Ideally, an example of each case handled by friendly-traceback
should be included here.

.. note::

     The content of this page is generated by running
     trb_english.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.1.11a
Python version: 3.7.8



ArithmeticError
---------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_common.py", line 227, in create_tracebacks
        result, message = getattr(mod, function)()
      File "TESTS:\runtime\test_arithmetic_error.py", line 17, in test_arithmetic_error
        assert "`ArithmeticError` is the base class" in result
    AssertionError: 
    
    No information is available about this exception.
    
    Execution stopped on line 227 of file TESTS:\trb_common.py.
    
       226:                     if function is not None:
    -->227:                         result, message = getattr(mod, function)()
       228:                         save_messages[function] = message

        Known objects shown above:
            function: 'test_arithmetic_error'
            getattr: <builtin function getattr>
            mod: <module 'test_arithmetic_error'>
                from TESTS:\runtime\test_arithmetic_error.py
            global save_messages: {}
        
    Exception raised on line 17 of file TESTS:\runtime\test_arithmetic_error.py.
    
       16:     if friendly_traceback.get_lang() == "en":
    -->17:         assert "`ArithmeticError` is the base class" in result
       18:     return result, message

        Known objects shown above:
            global friendly_traceback: <module 'friendly_traceback'>
                from FRIENDLY:\friendly_traceback\__init__.py
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 622
            message: ''
        

AttributeError - class attribute
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 35, in test_attribute_error
        a.x  # Testing instance
    AttributeError: 'A' object has no attribute 'x'
    
    No information is available about this exception.
    
        The object `a` has no attribute named `x`.
        
    Exception raised on line 35 of file TESTS:\runtime\test_attribute_error.py.
    
       34:         a = A()
    -->35:         a.x  # Testing instance
       36:     except Exception as e:

        Known objects shown above:
            a: <test_attribute_error.test_attribute_error.<locals>.A object>
            A: <class 'test_attribute_error.test_attribute_error.<locals>.A'>
            Exception: <class 'Exception'>
            e: AttributeError("'A' object has no attribute 'x'")
        


AttributeError - typo in module attribute
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 66, in test_misspelled_module_attribute
        string.ascii_lowecase
    AttributeError: module 'string' has no attribute 'ascii_lowecase'
    
        Did you mean `ascii_lowercase`?
        
    No information is available about this exception.
    
        Perhaps you meant to write `string.ascii_lowercase` instead of `string.ascii_lowecase`
        
    Exception raised on line 66 of file TESTS:\runtime\test_attribute_error.py.
    
       65:     try:
    -->66:         string.ascii_lowecase
       67:     except Exception as e:

        Known objects shown above:
            string: <module 'string'> from PYTHON_LIB:\string.py
            Exception: <class 'Exception'>
            e: AttributeError("module 'string' has no attribute 'ascii_lowe...)
        


AttributeError - typo in module attribute 2
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 82, in test_misspelled_module_attribute_2
        math.cost
    AttributeError: module 'math' has no attribute 'cost'
    
        Did you mean one of the following: `cos, cosh, acos`?
        
    No information is available about this exception.
    
        Instead of writing `math.cost`, perhaps you meant to write one of 
        the following names which are attributes of module `math`:
        `cos, cosh, acos`
        
    Exception raised on line 82 of file TESTS:\runtime\test_attribute_error.py.
    
       81:     try:
    -->82:         math.cost
       83:     except Exception as e:

        Known objects shown above:
            math: <module 'math' (builtin)>
            Exception: <class 'Exception'>
            e: AttributeError("module 'math' has no attribute 'cost'")
        


FileNotFoundError
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 6, in test_file_not_found_error
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    No information is available about this exception.
    
        In your program, the name of the
        file that cannot be found is `does_not_exist`.
        
    Exception raised on line 6 of file TESTS:\runtime\test_file_not_found_error.py.
    
       5:     try:
    -->6:         open("does_not_exist")
       7:     except Exception as e:

        Known objects shown above:
            open: <builtin function open>
            Exception: <class 'Exception'>
            e: FileNotFoundError(2, 'No such file or directory')
        


ImportError
-----------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 6, in test_import_error
        from math import Pi
    ImportError: cannot import name 'Pi' from 'math' (unknown location)
    
        Did you mean `pi`?
        
    No information is available about this exception.
    
        Perhaps you meant to import `pi` (from `math`) instead of `Pi`
        
    Exception raised on line 6 of file TESTS:\runtime\test_import_error.py.
    
       5:     try:
    -->6:         from math import Pi
       7:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: ImportError("cannot import name 'Pi' from 'math' (unknown lo...)
        


KeyError
--------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 7, in test_key_error
        d["c"]
    KeyError: 'c'
    
    No information is available about this exception.
    
        In your program, the key that cannot be found is `'c'`.
        
    Exception raised on line 7 of file TESTS:\runtime\test_key_error.py.
    
       6:     try:
    -->7:         d["c"]
       8:     except Exception as e:

        Known objects shown above:
            d: {'a': 1, 'b': 2}
            Exception: <class 'Exception'>
            e: KeyError('c')
        


LookupError
-----------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_common.py", line 227, in create_tracebacks
        result, message = getattr(mod, function)()
      File "TESTS:\runtime\test_lookup_error.py", line 18, in test_lookup_error
        assert "`LookupError` is the base class for" in result
    AssertionError: 
    
    No information is available about this exception.
    
    Execution stopped on line 227 of file TESTS:\trb_common.py.
    
       226:                     if function is not None:
    -->227:                         result, message = getattr(mod, function)()
       228:                         save_messages[function] = message

        Known objects shown above:
            function: 'test_lookup_error'
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 591
            message: "'c'"
            getattr: <builtin function getattr>
            mod: <module 'test_lookup_error'> from TESTS:\runtime\test_lookup_error.py
            global save_messages: {'test_attribute_error': "'A' object has no attribute 'x'", ...}
                len(save_messages): 6
        
    Exception raised on line 18 of file TESTS:\runtime\test_lookup_error.py.
    
       17:     if friendly_traceback.get_lang() == "en":
    -->18:         assert "`LookupError` is the base class for" in result
       19:     return result, message

        Known objects shown above:
            global friendly_traceback: <module 'friendly_traceback'>
                from FRIENDLY:\friendly_traceback\__init__.py
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 662
            message: 'Fake message'
        

IndexError - short tuple
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 8, in test_index_error1
        print(a[3], b[2])
    IndexError: tuple index out of range
    
    No information is available about this exception.
    
    Exception raised on line 8 of file TESTS:\runtime\test_index_error.py.
    
       7:     try:
    -->8:         print(a[3], b[2])
       9:     except Exception as e:

        Known objects shown above:
            print: <builtin function print>
            a: (1, 2, 3)
            b: [1, 2, 3]
            Exception: <class 'Exception'>
            e: IndexError('tuple index out of range')
        


IndexError - long list
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 22, in test_index_error2
        print(a[50], b[0])
    IndexError: list index out of range
    
    No information is available about this exception.
    
    Exception raised on line 22 of file TESTS:\runtime\test_index_error.py.
    
       21:     try:
    -->22:         print(a[50], b[0])
       23:     except Exception as e:

        Known objects shown above:
            print: <builtin function print>
            a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
            b: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...)
                len(b): 50
            Exception: <class 'Exception'>
            e: IndexError('list index out of range')
        


ModuleNotFoundError
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 6, in test_module_not_found_error
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        Did you mean `tkinter`?
        
    No information is available about this exception.
    
        The name of the module that could not be imported is `Tkinter`.
        `tkinter` is an existing module that has a similar name.
        
    Exception raised on line 6 of file TESTS:\runtime\test_module_not_found_error.py.
    
       5:     try:
    -->6:         import Tkinter
       7:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: ModuleNotFoundError("No module named 'Tkinter'")
        


NameError - 1
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 6, in test_name_error
        this = something
    NameError: name 'something' is not defined
    
    No information is available about this exception.
    
        In your program, `something` is an unknown name.
        I have no additional information for you.
    Exception raised on line 6 of file TESTS:\runtime\test_name_error.py.
    
       5:     try:
    -->6:         this = something
       7:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: NameError("name 'something' is not defined")
        


NameError - 2
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 20, in test_name_error2
        x = babs(-1)
    NameError: name 'babs' is not defined
    
        Did you mean `abs`?
    No information is available about this exception.
    
        In your program, `babs` is an unknown name.
        Instead of writing `babs`, perhaps you meant one of the following:
        *   Local scope: `nabs`
        *   Global scope: `fabs`
        *   Python builtins: `abs`
        
    Exception raised on line 20 of file TESTS:\runtime\test_name_error.py.
    
       19:     try:
    -->20:         x = babs(-1)
       21:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: NameError("name 'babs' is not defined")
        


NameError - 3
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 35, in test_name_error3
        y = x
    NameError: name 'x' is not defined
    
        Did you use a colon instead of an equal sign?
    No information is available about this exception.
    
        In your program, `x` is an unknown name.
        A type hint found for `x` in the global scope.
        Perhaps you had used a colon instead of an equal sign and written
        
            x : 3
        
        instead of
        
            x = 3
        
    Exception raised on line 35 of file TESTS:\runtime\test_name_error.py.
    
       34:     try:
    -->35:         y = x
       36:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: NameError("name 'x' is not defined")
        


NameError - 4
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 48, in test_name_error4
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined
    
        Did you mean `cos`?
    No information is available about this exception.
    
        In your program, `cost` is an unknown name.
        Instead of writing `cost`, perhaps you meant one of the following:
        *   Global scope: `cos`, `cosh`, `acos`
        
    Exception raised on line 48 of file TESTS:\runtime\test_name_error.py.
    
       47:     try:
    -->48:         cost  # wrote from math import * above
       49:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: NameError("name 'cost' is not defined")
        


OverflowError
-------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_common.py", line 227, in create_tracebacks
        result, message = getattr(mod, function)()
      File "TESTS:\runtime\test_overflow_error.py", line 17, in test_overflow_error
        assert "`OverflowError` is raised when the result" in result
    AssertionError: 
    
    No information is available about this exception.
    
    Execution stopped on line 227 of file TESTS:\trb_common.py.
    
       226:                     if function is not None:
    -->227:                         result, message = getattr(mod, function)()
       228:                         save_messages[function] = message

        Known objects shown above:
            function: 'test_overflow_error'
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 821
            message: "name 'cost' is not defined"
            getattr: <builtin function getattr>
            mod: <module 'test_overflow_error'>
                from TESTS:\runtime\test_overflow_error.py
            global save_messages: {'test_attribute_error': "'A' object has no attribute 'x'", ...}
                len(save_messages): 13
        
    Exception raised on line 17 of file TESTS:\runtime\test_overflow_error.py.
    
       16:     if friendly_traceback.get_lang() == "en":
    -->17:         assert "`OverflowError` is raised when the result" in result
       18:     return result, message

        Known objects shown above:
            global friendly_traceback: <module 'friendly_traceback'>
                from FRIENDLY:\friendly_traceback\__init__.py
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 561
            message: "(34, 'Result too large')"
        

RecursionError
--------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_common.py", line 227, in create_tracebacks
        result, message = getattr(mod, function)()
      File "TESTS:\runtime\test_recursion_error.py", line 16, in test_function_recursion_error
        assert "too many times" in result
    AssertionError: 
    
    No information is available about this exception.
    
    Execution stopped on line 227 of file TESTS:\trb_common.py.
    
       226:                     if function is not None:
    -->227:                         result, message = getattr(mod, function)()
       228:                         save_messages[function] = message

        Known objects shown above:
            function: 'test_function_recursion_error'
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 821
            message: "name 'cost' is not defined"
            getattr: <builtin function getattr>
            mod: <module 'test_recursion_error'>
                from TESTS:\runtime\test_recursion_error.py
            global save_messages: {'test_attribute_error': "'A' object has no attribute 'x'", ...}
                len(save_messages): 13
        
    Exception raised on line 16 of file TESTS:\runtime\test_recursion_error.py.
    
       15:     if friendly_traceback.get_lang() == "en":
    -->16:         assert "too many times" in result
       17:     return result, message

        Known objects shown above:
            global friendly_traceback: <module 'friendly_traceback'>
                from FRIENDLY:\friendly_traceback\__init__.py
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 1135
            message: 'maximum recursion depth exceeded'
        

TypeError - 1: concatenate two different types
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 8, in test_type_error1
        result = a + one
    TypeError: can only concatenate str (not "int") to str
    
    No information is available about this exception.
    
        You tried to concatenate (add) two different types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 8 of file TESTS:\runtime\test_type_error.py.
    
       7:         one = 1
    -->8:         result = a + one
       9:     except Exception as e:

        Known objects shown above:
            one: 1
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError('can only concatenate str (not "int") to str')
        


TypeError - 1a: concatenate two different types
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 26, in test_type_error1a
        result = a + a_list
    TypeError: can only concatenate str (not "list") to str
    
    No information is available about this exception.
    
        You tried to concatenate (add) two different types of objects:
        a string (`str`) and a `list`
        
    Exception raised on line 26 of file TESTS:\runtime\test_type_error.py.
    
       25:         a_list = [1, 2, 3]
    -->26:         result = a + a_list
       27:     except Exception as e:

        Known objects shown above:
            a_list: [1, 2, 3]
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError('can only concatenate str (not "list") to str')
        


TypeError - 1b: concatenate two different types
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 44, in test_type_error1b
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    No information is available about this exception.
    
        You tried to concatenate (add) two different types of objects:
        a `tuple` and a `list`
        
    Exception raised on line 44 of file TESTS:\runtime\test_type_error.py.
    
       43:         a_list = [1, 2, 3]
    -->44:         result = a_tuple + a_list
       45:     except Exception as e:

        Known objects shown above:
            a_list: [1, 2, 3]
            a_tuple: (1, 2, 3)
            Exception: <class 'Exception'>
            e: TypeError('can only concatenate tuple (not "list") to tuple')
        


TypeError - 2: unsupported operand type(s) for +
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 60, in test_type_error2
        result = one + none
    TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'
    
    No information is available about this exception.
    
        You tried to add two incompatible types of objects:
        an integer (`int`) and a variable equal to `None` (`NoneType`)
        
    Exception raised on line 60 of file TESTS:\runtime\test_type_error.py.
    
       59:         none = None
    -->60:         result = one + none
       61:     except Exception as e:

        Known objects shown above:
            none: None
            one: 1
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for +: 'int' and 'Non...)
        


TypeError - 2a: unsupported operand type(s) for +=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 78, in test_type_error2a
        one += two
    TypeError: unsupported operand type(s) for +=: 'int' and 'str'
    
    No information is available about this exception.
    
        You tried to add two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 78 of file TESTS:\runtime\test_type_error.py.
    
       77:         two = "two"
    -->78:         one += two
       79:     except Exception as e:

        Known objects shown above:
            two: 'two'
            one: 1
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for +=: 'int' and 'str'")
        


TypeError - 3: unsupported operand type(s) for -
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 94, in test_type_error3
        result = a - b
    TypeError: unsupported operand type(s) for -: 'tuple' and 'list'
    
    No information is available about this exception.
    
        You tried to subtract two incompatible types of objects:
        a `tuple` and a `list`
        
    Exception raised on line 94 of file TESTS:\runtime\test_type_error.py.
    
       93:         b = [3, 4]
    -->94:         result = a - b
       95:     except Exception as e:

        Known objects shown above:
            b: [3, 4]
            a: (1, 2)
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for -: 'tuple' and 'l...)
        


TypeError - 3a: unsupported operand type(s) for -=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 110, in test_type_error3a
        b -= a
    TypeError: unsupported operand type(s) for -=: 'list' and 'tuple'
    
    No information is available about this exception.
    
        You tried to subtract two incompatible types of objects:
        a `list` and a `tuple`
        
    Exception raised on line 110 of file TESTS:\runtime\test_type_error.py.
    
       109:         b = [3, 4]
    -->110:         b -= a
       111:     except Exception as e:

        Known objects shown above:
            b: [3, 4]
            a: (1, 2)
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for -=: 'list' and 't...)
        


TypeError - 4: unsupported operand type(s) for *
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 126, in test_type_error4
        result = a * b
    TypeError: unsupported operand type(s) for *: 'complex' and 'set'
    
    No information is available about this exception.
    
        You tried to multiply two incompatible types of objects:
        a complex number and a `set`
        
    Exception raised on line 126 of file TESTS:\runtime\test_type_error.py.
    
       125:         b = {2, 3}
    -->126:         result = a * b
       127:     except Exception as e:

        Known objects shown above:
            b: {2, 3}
            a: 1j
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for *: 'complex' and ...)
        


TypeError - 4a: unsupported operand type(s) for ``*=``
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 142, in test_type_error4a
        b *= a
    TypeError: unsupported operand type(s) for *=: 'set' and 'complex'
    
    No information is available about this exception.
    
        You tried to multiply two incompatible types of objects:
        a `set` and a complex number
        
    Exception raised on line 142 of file TESTS:\runtime\test_type_error.py.
    
       141:         b = {2, 3}
    -->142:         b *= a
       143:     except Exception as e:

        Known objects shown above:
            b: {2, 3}
            a: 1j
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for *=: 'set' and 'co...)
        


TypeError - 5: unsupported operand type(s) for /
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 158, in test_type_error5
        result = a / b
    TypeError: unsupported operand type(s) for /: 'dict' and 'float'
    
    No information is available about this exception.
    
        You tried to divide two incompatible types of objects:
        a dictionary (`dict`) and a number (`float`)
        
    Exception raised on line 158 of file TESTS:\runtime\test_type_error.py.
    
       157:         b = 3.1416
    -->158:         result = a / b
       159:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for /: 'dict' and 'fl...)
        


TypeError - 5a: unsupported operand type(s) for /=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 174, in test_type_error5a
        b /= a
    TypeError: unsupported operand type(s) for /=: 'float' and 'dict'
    
    No information is available about this exception.
    
        You tried to divide two incompatible types of objects:
        a number (`float`) and a dictionary (`dict`)
        
    Exception raised on line 174 of file TESTS:\runtime\test_type_error.py.
    
       173:         b = 3.1416
    -->174:         b /= a
       175:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for /=: 'float' and '...)
        


TypeError - 5b: unsupported operand type(s) for //
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 190, in test_type_error5b
        result = a // b
    TypeError: unsupported operand type(s) for //: 'dict' and 'int'
    
    No information is available about this exception.
    
        You tried to divide two incompatible types of objects:
        a dictionary (`dict`) and an integer (`int`)
        
    Exception raised on line 190 of file TESTS:\runtime\test_type_error.py.
    
       189:         b = 1
    -->190:         result = a // b
       191:     except Exception as e:

        Known objects shown above:
            b: 1
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for //: 'dict' and 'int'")
        


TypeError - 5c: unsupported operand type(s) for //=
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 206, in test_type_error5c
        b //= a
    TypeError: unsupported operand type(s) for //=: 'float' and 'dict'
    
    No information is available about this exception.
    
        You tried to divide two incompatible types of objects:
        a number (`float`) and a dictionary (`dict`)
        
    Exception raised on line 206 of file TESTS:\runtime\test_type_error.py.
    
       205:         b = 3.1416
    -->206:         b //= a
       207:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for //=: 'float' and ...)
        


TypeError - 6: unsupported operand type(s) for &
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 222, in test_type_error6
        result = a & b
    TypeError: unsupported operand type(s) for &: 'str' and 'int'
    
    No information is available about this exception.
    
        You tried to perform the bitwise operation &
        on two incompatible types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 222 of file TESTS:\runtime\test_type_error.py.
    
       221:         b = 2
    -->222:         result = a & b
       223:     except Exception as e:

        Known objects shown above:
            b: 2
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for &: 'str' and 'int'")
        


TypeError - 6a: unsupported operand type(s) for &=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 238, in test_type_error6a
        b &= a
    TypeError: unsupported operand type(s) for &=: 'int' and 'str'
    
    No information is available about this exception.
    
        You tried to perform the bitwise operation &=
        on two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 238 of file TESTS:\runtime\test_type_error.py.
    
       237:         b = 2
    -->238:         b &= a
       239:     except Exception as e:

        Known objects shown above:
            b: 2
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for &=: 'int' and 'str'")
        


TypeError - 7: unsupported operand type(s) for **
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 254, in test_type_error7
        result = a ** b
    TypeError: unsupported operand type(s) for ** or pow(): 'dict' and 'float'
    
    No information is available about this exception.
    
        You tried to exponentiate (raise to a power)
        using two incompatible types of objects:
        a dictionary (`dict`) and a number (`float`)
        
    Exception raised on line 254 of file TESTS:\runtime\test_type_error.py.
    
       253:         b = 3.1416
    -->254:         result = a ** b
       255:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for ** or pow(): 'dic...)
        


TypeError - 7a: unsupported operand type(s) for ``**=``
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 270, in test_type_error7a
        a **= b
    TypeError: unsupported operand type(s) for ** or pow(): 'dict' and 'float'
    
    No information is available about this exception.
    
        You tried to exponentiate (raise to a power)
        using two incompatible types of objects:
        a dictionary (`dict`) and a number (`float`)
        
    Exception raised on line 270 of file TESTS:\runtime\test_type_error.py.
    
       269:         b = 3.1416
    -->270:         a **= b
       271:     except Exception as e:

        Known objects shown above:
            b: 3.1416
            a: {1: 1, 2: 2}
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for ** or pow(): 'dic...)
        


TypeError - 8: unsupported operand type(s) for >>
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 286, in test_type_error8
        result = a >> b
    TypeError: unsupported operand type(s) for >>: 'str' and 'int'
    
    No information is available about this exception.
    
        You tried to perform the bit shifting operation >>
        on two incompatible types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 286 of file TESTS:\runtime\test_type_error.py.
    
       285:         b = 42
    -->286:         result = a >> b
       287:     except Exception as e:

        Known objects shown above:
            b: 42
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for >>: 'str' and 'int'")
        


TypeError - 8a: unsupported operand type(s) for >>=
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 302, in test_type_error8a
        a >>= b
    TypeError: unsupported operand type(s) for >>=: 'str' and 'int'
    
    No information is available about this exception.
    
        You tried to perform the bit shifting operation >>=
        on two incompatible types of objects:
        a string (`str`) and an integer (`int`)
        
    Exception raised on line 302 of file TESTS:\runtime\test_type_error.py.
    
       301:         b = 42
    -->302:         a >>= b
       303:     except Exception as e:

        Known objects shown above:
            b: 42
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for >>=: 'str' and 'int'")
        


TypeError - 9: unsupported operand type(s) for @
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 318, in test_type_error9
        result = a @ b
    TypeError: unsupported operand type(s) for @: 'str' and 'int'
    
    No information is available about this exception.
    
        You tried to use the operator @
        using two incompatible types of objects:
        a string (`str`) and an integer (`int`).
        This operator is normally used only
        for multiplication of matrices.
        
    Exception raised on line 318 of file TESTS:\runtime\test_type_error.py.
    
       317:         b = 2
    -->318:         result = a @ b
       319:     except Exception as e:

        Known objects shown above:
            b: 2
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for @: 'str' and 'int'")
        


TypeError - 9a: unsupported operand type(s) for @=
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 334, in test_type_error9a
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    No information is available about this exception.
    
        You tried to use the operator @=
        using two incompatible types of objects:
        a string (`str`) and an integer (`int`).
        This operator is normally used only
        for multiplication of matrices.
        
    Exception raised on line 334 of file TESTS:\runtime\test_type_error.py.
    
       333:         b = 2
    -->334:         a @= b
       335:     except Exception as e:

        Known objects shown above:
            b: 2
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("unsupported operand type(s) for @=: 'str' and 'int'")
        


TypeError - 10: comparison between incompatible types
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 350, in test_type_error10
        b < a
    TypeError: '<' not supported between instances of 'int' and 'str'
    
    No information is available about this exception.
    
        You tried to do an order comparison (<)
        between two incompatible types of objects:
        an integer (`int`) and a string (`str`)
        
    Exception raised on line 350 of file TESTS:\runtime\test_type_error.py.
    
       349:         b = 42
    -->350:         b < a
       351:     except Exception as e:

        Known objects shown above:
            b: 42
            a: 'a'
            Exception: <class 'Exception'>
            e: TypeError("'<' not supported between instances of 'int' and ...)
        


TypeError - 11: bad operand type for unary +
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 364, in test_type_error11
        a = +"abc"
    TypeError: bad operand type for unary +: 'str'
    
    No information is available about this exception.
    
        You tried to use the unary operator '+'
        with the following type of object: a string (`str`).
        This operation is not defined for this type of object.
        
    Exception raised on line 364 of file TESTS:\runtime\test_type_error.py.
    
       363:     try:
    -->364:         a = +"abc"
       365:         print(a)

        Known objects shown above:
            print: <builtin function print>
        


TypeError - 11a: bad operand type for unary -
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 379, in test_type_error11a
        a = -[1, 2, 3]
    TypeError: bad operand type for unary -: 'list'
    
    No information is available about this exception.
    
        You tried to use the unary operator '-'
        with the following type of object: a `list`.
        This operation is not defined for this type of object.
        
    Exception raised on line 379 of file TESTS:\runtime\test_type_error.py.
    
       378:     try:
    -->379:         a = -[1, 2, 3]
       380:         print(a)

        Known objects shown above:
            print: <builtin function print>
        


TypeError - 11b: bad operand type for unary ~
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 394, in test_type_error11b
        a = ~(1, 2, 3)
    TypeError: bad operand type for unary ~: 'tuple'
    
    No information is available about this exception.
    
        You tried to use the unary operator '~'
        with the following type of object: a `tuple`.
        This operation is not defined for this type of object.
        
    Exception raised on line 394 of file TESTS:\runtime\test_type_error.py.
    
       393:     try:
    -->394:         a = ~(1, 2, 3)
       395:         print(a)

        Known objects shown above:
            print: <builtin function print>
        


TypeError - 12: object does not support item assignment
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 410, in test_type_error12
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
    No information is available about this exception.
    
        In Python, some objects are known as immutable:
        once defined, their value cannot be changed.
        You tried change part of such an immutable object: a `tuple`,
        most likely by using an indexing operation.
        
    Exception raised on line 410 of file TESTS:\runtime\test_type_error.py.
    
       409:     try:
    -->410:         a[0] = 0
       411:     except Exception as e:

        Known objects shown above:
            a: (1, 2, 3)
            Exception: <class 'Exception'>
            e: TypeError("'tuple' object does not support item assignment")
        


TypeError - 13: wrong number of positional arguments
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 427, in test_type_error13
        fn(1)
    TypeError: fn() takes 0 positional arguments but 1 was given
    
    No information is available about this exception.
    
        You apparently have called the function `fn` with
        1 positional argument(s) while it requires 0
        such positional argument(s).
        
    Exception raised on line 427 of file TESTS:\runtime\test_type_error.py.
    
       426:     try:
    -->427:         fn(1)
       428:     except Exception as e:

        Known objects shown above:
            fn: <function test_type_error13.<locals>.fn>
            Exception: <class 'Exception'>
            e: TypeError('fn() takes 0 positional arguments but 1 was given')
        


TypeError - 13a: wrong number of positional arguments
-----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 446, in test_type_error13a
        A().f(1)
    TypeError: f() takes 1 positional argument but 2 were given
    
        Perhaps you forgot `self` when defining `f`.
        
    No information is available about this exception.
    
        You apparently have called the function `f` with
        2 positional argument(s) while it requires 1
        such positional argument(s).
        Perhaps you forgot `self` when defining `f`.
        
    Exception raised on line 446 of file TESTS:\runtime\test_type_error.py.
    
       445:     try:
    -->446:         A().f(1)
       447:     except Exception as e:

        Known objects shown above:
            A: <class 'test_type_error.test_type_error13a.<locals>.A'>
            Exception: <class 'Exception'>
            e: TypeError('f() takes 1 positional argument but 2 were given')
        


TypeError - 14: missing positional arguments
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 465, in test_type_error14
        fn(1)
    TypeError: fn() missing 2 required positional arguments: 'b' and 'c'
    
    No information is available about this exception.
    
        You apparently have called the function 'fn()' with
        fewer positional arguments than it requires (2 missing).
        
    Exception raised on line 465 of file TESTS:\runtime\test_type_error.py.
    
       464:     try:
    -->465:         fn(1)
       466:     except Exception as e:

        Known objects shown above:
            fn: <function test_type_error14.<locals>.fn>
            Exception: <class 'Exception'>
            e: TypeError("fn() missing 2 required positional arguments: 'b'...)
        


TypeError - 15: tuple object is not callable
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 480, in test_type_error15
        _ = (1, 2)(3, 4)
    TypeError: 'tuple' object is not callable
    
        Perhaps you had a missing comma between two tuples.
        
    No information is available about this exception.
    
        I suspect that you had an object of this type, a `tuple`,
        followed by what looked like a tuple, '(...)',
        which Python took as an indication of a function call.
        Perhaps you had a missing comma between two tuples.
        
    Exception raised on line 480 of file TESTS:\runtime\test_type_error.py.
    
       479:     try:
    -->480:         _ = (1, 2)(3, 4)
       481:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: TypeError("'tuple' object is not callable")
        


TypeError - 15a: list object is not callable
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 494, in test_type_error15a
        _ = [1, 2](3, 4)
    TypeError: 'list' object is not callable
    
        Perhaps you had a missing comma before the tuple.
        
    No information is available about this exception.
    
        I suspect that you had an object of this type, a `list`,
        followed by what looked like a tuple, '(...)',
        which Python took as an indication of a function call.
        Perhaps you had a missing comma before the tuple.
        
    Exception raised on line 494 of file TESTS:\runtime\test_type_error.py.
    
       493:     try:
    -->494:         _ = [1, 2](3, 4)
       495:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: TypeError("'list' object is not callable")
        


TypeError - 16: exception derived from BaseException
----------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 507, in test_type_error16
        raise "exception"
    TypeError: exceptions must derive from BaseException
    
    No information is available about this exception.
    
        In Python 3, exceptions must be derived from BaseException.
        
    Exception raised on line 507 of file TESTS:\runtime\test_type_error.py.
    
       506:     try:
    -->507:         raise "exception"
       508:     except Exception as e:

        Known objects shown above:
            Exception: <class 'Exception'>
            e: TypeError('exceptions must derive from BaseException')
        


UnboundLocalError - 1: missing global
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_unbound_local_error_missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 11, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        Did you forget to add `global spam_missing_global`?
        
    No information is available about this exception.
    
        The name `spam_missing_global` exists in the global scope.
        Perhaps the statement
        
            global spam_missing_global
        
        should have been included as the first line inside your function.
        
    Execution stopped on line 27 of file TESTS:\runtime\test_unbound_local_error.py.
    
       26:     try:
    -->27:         outer_missing_global()
       28:     except Exception as e:

        Known objects shown above:
            global outer_missing_global: <function outer_missing_global>
            Exception: <class 'Exception'>
            e: UnboundLocalError("local variable 'spam_missing_global' refe...)
        
    Exception raised on line 9 of file TESTS:\runtime\test_unbound_local_error.py.
    
        8:     def inner():
    --> 9:         spam_missing_global += 1
       10: 

        Known objects shown above:
            global spam_missing_global: 1
        


UnboundLocalError - 2: missing nonlocal
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 48, in test_unbound_local_error_missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 20, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 18, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        Did you forget to add `nonlocal spam_missing_nonlocal`?
        
    No information is available about this exception.
    
        The name `spam_missing_nonlocal` exists in the nonlocal scope.
        Perhaps the statement
        
            nonlocal spam_missing_nonlocal
        
        should have been included as the first line inside your function.
        
    Execution stopped on line 48 of file TESTS:\runtime\test_unbound_local_error.py.
    
       47:     try:
    -->48:         outer_missing_nonlocal()
       49:     except Exception as e:

        Known objects shown above:
            global outer_missing_nonlocal: <function outer_missing_nonlocal>
            Exception: <class 'Exception'>
            e: UnboundLocalError("local variable 'spam_missing_nonlocal' re...)
        
    Exception raised on line 18 of file TESTS:\runtime\test_unbound_local_error.py.
    
       17:     def inner():
    -->18:         spam_missing_nonlocal += 1
       19: 


Unknown exception
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_common.py", line 227, in create_tracebacks
        result, message = getattr(mod, function)()
      File "TESTS:\runtime\test_unknown_error.py", line 18, in test_function_unknown_error
        assert "Please report this example" in result
    AssertionError: 
    
    No information is available about this exception.
    
    Execution stopped on line 227 of file TESTS:\trb_common.py.
    
       226:                     if function is not None:
    -->227:                         result, message = getattr(mod, function)()
       228:                         save_messages[function] = message

        Known objects shown above:
            function: 'test_function_unknown_error'
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 1487
            message: "local variable 'spam_missing_nonlocal' referenced before as..."
                len(message): 67
            getattr: <builtin function getattr>
            mod: <module 'test_unknown_error'> from TESTS:\runtime\test_unknown_error.py
            global save_messages: {'test_attribute_error': "'A' object has no attribute 'x'", ...}
                len(save_messages): 47
        
    Exception raised on line 18 of file TESTS:\runtime\test_unknown_error.py.
    
       17:     if friendly_traceback.get_lang() == "en":
    -->18:         assert "Please report this example" in result
       19:     return result, message

        Known objects shown above:
            global friendly_traceback: <module 'friendly_traceback'>
                from FRIENDLY:\friendly_traceback\__init__.py
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 822
            message: 'Some informative message about an unknown exception.'
        

ZeroDivisionError - 1
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_common.py", line 227, in create_tracebacks
        result, message = getattr(mod, function)()
      File "TESTS:\runtime\test_zero_division_error.py", line 14, in test_zero_division_error
        assert "A `ZeroDivisionError` occurs when" in result
    AssertionError: 
    
    No information is available about this exception.
    
    Execution stopped on line 227 of file TESTS:\trb_common.py.
    
       226:                     if function is not None:
    -->227:                         result, message = getattr(mod, function)()
       228:                         save_messages[function] = message

        Known objects shown above:
            function: 'test_zero_division_error'
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 1487
            message: "local variable 'spam_missing_nonlocal' referenced before as..."
                len(message): 67
            getattr: <builtin function getattr>
            mod: <module 'test_zero_division_error'>
                from TESTS:\runtime\test_zero_division_error.py
            global save_messages: {'test_attribute_error': "'A' object has no attribute 'x'", ...}
                len(save_messages): 47
        
    Exception raised on line 14 of file TESTS:\runtime\test_zero_division_error.py.
    
       13:     if friendly_traceback.get_lang() == "en":
    -->14:         assert "A `ZeroDivisionError` occurs when" in result
       15:     return result, message

        Known objects shown above:
            global friendly_traceback: <module 'friendly_traceback'>
                from FRIENDLY:\friendly_traceback\__init__.py
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 560
            message: 'division by zero'
        

ZeroDivisionError - 2
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_common.py", line 227, in create_tracebacks
        result, message = getattr(mod, function)()
      File "TESTS:\runtime\test_zero_division_error.py", line 29, in test_zero_division_error2
        assert "A `ZeroDivisionError` occurs when" in result
    AssertionError: 
    
    No information is available about this exception.
    
    Execution stopped on line 227 of file TESTS:\trb_common.py.
    
       226:                     if function is not None:
    -->227:                         result, message = getattr(mod, function)()
       228:                         save_messages[function] = message

        Known objects shown above:
            function: 'test_zero_division_error2'
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 1487
            message: "local variable 'spam_missing_nonlocal' referenced before as..."
                len(message): 67
            getattr: <builtin function getattr>
            mod: <module 'test_zero_division_error'>
                from TESTS:\runtime\test_zero_division_error.py
            global save_messages: {'test_attribute_error': "'A' object has no attribute 'x'", ...}
                len(save_messages): 47
        
    Exception raised on line 29 of file TESTS:\runtime\test_zero_division_error.py.
    
       28:     if friendly_traceback.get_lang() == "en":
    -->29:         assert "A `ZeroDivisionError` occurs when" in result
       30:     return result, message

        Known objects shown above:
            global friendly_traceback: <module 'friendly_traceback'>
                from FRIENDLY:\friendly_traceback\__init__.py
            result: '\n    Traceback (most recent call last):\n      File "TESTS...'
                len(result): 628
            message: 'integer division or modulo by zero'
        
