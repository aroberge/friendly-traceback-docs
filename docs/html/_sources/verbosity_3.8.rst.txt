
..   The content of this page is generated by running
     trb_verbosity.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.
     On Windows, if Sphinx is installed on your computer, it is suggested
     instead to run make_trb.bat in the root directory as it will create
     similar files for all languages *and* update the documentation.

Friendly-traceback version: 0.0.39a
Python version: 3.8.4

Verbosity: how much information do we want?
=============================================

Suppose we try to run following program

.. code-block:: python
   :linenos:

    # Used with test_verbosity.py
    
    a_1 = 2
    
    def function_1(a):
        a_2 = 4
        a_1 = a_1 + a_2 + a
    
    def function_2(y):
        return function_1(y + 1)
    
    
    def function_3(x):
        return 3 * function_2(x)
    
    function_3(1)


It would generate the following traceback:

.. code-block:: none


    Traceback (most recent call last):
      File "unbound_local_error.py", line 16, in <module>
        function_3(1)
      File "unbound_local_error.py", line 14, in function_3
        return 3 * function_2(x)
      File "unbound_local_error.py", line 10, in function_2
        return function_1(y + 1)
      File "unbound_local_error.py", line 7, in function_1
        a_1 = a_1 + a_2 + a
    UnboundLocalError: local variable 'a_1' referenced before assignment
    

Confronted with such a terse output, a beginner might be confused
as to what it means.

* What does "most recent call last" mean?
* What is an UnboundLocalError?
* What does it mean to be referenced before assignment?
* What do I need to do to fix this error?
* etc.

This might be even more acute if this beginner does not understand
English.

Friendly-traceback attempts to provide all the information to
understand what might have gone wrong and, hopefully, how to fix it.
Other than the name of the exception (UnboundLocalError) and
the message generated by Python
(local variable 'a_1' referenced before assignment),
all the text provided by Friendly-traceback is translatable;
currently, only the original English version and a French translation
are available.

Instead of showing all the different calls,
Friendly-traceback only shows two locations:
where the program stopped, and where the exception
was actually raised.

In some cases, the amount of information given by Friendly-traceback
using the default values might not be appropriate. This can
be adjusted by selecting a different "verbosity" level, as elsewhere.

Below, we show what content is included for each level.



Verbosity level 1: the default
------------------------------

This includes all the custom information provided by Friendly-traceback.
It does not include a standard Python traceback.

.. code-block:: none


    Python exception:
        UnboundLocalError: local variable 'a_1' referenced before assignment
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    Likely cause based on the information given by Python:
        The variable that appears to cause the problem is `a_1`.
        Perhaps the statement
        
            global a_1
        
        should have been included as the first line inside your function.
        The similar name `'a_2'` was found in the local scope. 
        
    Execution stopped on line 16 of file 'unbound_local_error.py'.
    
       13: def function_3(x):
       14:     return 3 * function_2(x)
       15: 
    -->16: function_3(1)

        Known identifiers:
            function_3: <function function_3>
        
    Exception raised on line 7 of file 'unbound_local_error.py'.
    
        4: 
        5: def function_1(a):
        6:     a_2 = 4
    --> 7:     a_1 = a_1 + a_2 + a

        Known identifiers:
            global a_1: 2
            a_2: 4
            a: 2
        


Verbosity level 2
------------------------------
This is the same as level 1 with the addition of a Python traceback
preceding the information given in level 1.

.. code-block:: none


    Traceback (most recent call last):
      File "unbound_local_error.py", line 16, in <module>
        function_3(1)
      File "unbound_local_error.py", line 14, in function_3
        return 3 * function_2(x)
      File "unbound_local_error.py", line 10, in function_2
        return function_1(y + 1)
      File "unbound_local_error.py", line 7, in function_1
        a_1 = a_1 + a_2 + a
    UnboundLocalError: local variable 'a_1' referenced before assignment
    
    Python exception:
        UnboundLocalError: local variable 'a_1' referenced before assignment
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    Likely cause based on the information given by Python:
        The variable that appears to cause the problem is `a_1`.
        Perhaps the statement
        
            global a_1
        
        should have been included as the first line inside your function.
        The similar name `'a_2'` was found in the local scope. 
        
    Execution stopped on line 16 of file 'unbound_local_error.py'.
    
       13: def function_3(x):
       14:     return 3 * function_2(x)
       15: 
    -->16: function_3(1)

        Known identifiers:
            function_3: <function function_3>
        
    Exception raised on line 7 of file 'unbound_local_error.py'.
    
        4: 
        5: def function_1(a):
        6:     a_2 = 4
    --> 7:     a_1 = a_1 + a_2 + a

        Known identifiers:
            global a_1: 2
            a_2: 4
            a: 2
        


Verbosity level 3
------------------------------
This is the same as level 1 with the addition of a Python traceback
after the information given in level 1.

.. code-block:: none


    Python exception:
        UnboundLocalError: local variable 'a_1' referenced before assignment
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    Likely cause based on the information given by Python:
        The variable that appears to cause the problem is `a_1`.
        Perhaps the statement
        
            global a_1
        
        should have been included as the first line inside your function.
        The similar name `'a_2'` was found in the local scope. 
        
    Execution stopped on line 16 of file 'unbound_local_error.py'.
    
       13: def function_3(x):
       14:     return 3 * function_2(x)
       15: 
    -->16: function_3(1)

        Known identifiers:
            function_3: <function function_3>
        
    Exception raised on line 7 of file 'unbound_local_error.py'.
    
        4: 
        5: def function_1(a):
        6:     a_2 = 4
    --> 7:     a_1 = a_1 + a_2 + a

        Known identifiers:
            global a_1: 2
            a_2: 4
            a: 2
        
    Traceback (most recent call last):
      File "unbound_local_error.py", line 16, in <module>
        function_3(1)
      File "unbound_local_error.py", line 14, in function_3
        return 3 * function_2(x)
      File "unbound_local_error.py", line 10, in function_2
        return function_1(y + 1)
      File "unbound_local_error.py", line 7, in function_1
        a_1 = a_1 + a_2 + a
    UnboundLocalError: local variable 'a_1' referenced before assignment
    


Verbosity level 4
------------------------------
This is similar to level 1 except that the generic meaning of
a given exception ("what do we mean by UnboundLocalError...")
is **not** included.

.. code-block:: none


    Python exception:
        UnboundLocalError: local variable 'a_1' referenced before assignment
        
    Likely cause based on the information given by Python:
        The variable that appears to cause the problem is `a_1`.
        Perhaps the statement
        
            global a_1
        
        should have been included as the first line inside your function.
        The similar name `'a_2'` was found in the local scope. 
        
    Execution stopped on line 16 of file 'unbound_local_error.py'.
    
       13: def function_3(x):
       14:     return 3 * function_2(x)
       15: 
    -->16: function_3(1)

        Known identifiers:
            function_3: <function function_3>
        
    Exception raised on line 7 of file 'unbound_local_error.py'.
    
        4: 
        5: def function_1(a):
        6:     a_2 = 4
    --> 7:     a_1 = a_1 + a_2 + a

        Known identifiers:
            global a_1: 2
            a_2: 4
            a: 2
        


Verbosity level 5
------------------------------
Same as level 4, with the addition of a Python traceback before
the rest of the information.

.. code-block:: none


    Traceback (most recent call last):
      File "unbound_local_error.py", line 16, in <module>
        function_3(1)
      File "unbound_local_error.py", line 14, in function_3
        return 3 * function_2(x)
      File "unbound_local_error.py", line 10, in function_2
        return function_1(y + 1)
      File "unbound_local_error.py", line 7, in function_1
        a_1 = a_1 + a_2 + a
    UnboundLocalError: local variable 'a_1' referenced before assignment
    
    Python exception:
        UnboundLocalError: local variable 'a_1' referenced before assignment
        
    Likely cause based on the information given by Python:
        The variable that appears to cause the problem is `a_1`.
        Perhaps the statement
        
            global a_1
        
        should have been included as the first line inside your function.
        The similar name `'a_2'` was found in the local scope. 
        
    Execution stopped on line 16 of file 'unbound_local_error.py'.
    
       13: def function_3(x):
       14:     return 3 * function_2(x)
       15: 
    -->16: function_3(1)

        Known identifiers:
            function_3: <function function_3>
        
    Exception raised on line 7 of file 'unbound_local_error.py'.
    
        4: 
        5: def function_1(a):
        6:     a_2 = 4
    --> 7:     a_1 = a_1 + a_2 + a

        Known identifiers:
            global a_1: 2
            a_2: 4
            a: 2
        


Verbosity level 6
------------------------------
Same as level 4, with the addition of a Python traceback after
the rest of the information.

.. code-block:: none


    Python exception:
        UnboundLocalError: local variable 'a_1' referenced before assignment
        
    Likely cause based on the information given by Python:
        The variable that appears to cause the problem is `a_1`.
        Perhaps the statement
        
            global a_1
        
        should have been included as the first line inside your function.
        The similar name `'a_2'` was found in the local scope. 
        
    Execution stopped on line 16 of file 'unbound_local_error.py'.
    
       13: def function_3(x):
       14:     return 3 * function_2(x)
       15: 
    -->16: function_3(1)

        Known identifiers:
            function_3: <function function_3>
        
    Exception raised on line 7 of file 'unbound_local_error.py'.
    
        4: 
        5: def function_1(a):
        6:     a_2 = 4
    --> 7:     a_1 = a_1 + a_2 + a

        Known identifiers:
            global a_1: 2
            a_2: 4
            a: 2
        
    Traceback (most recent call last):
      File "unbound_local_error.py", line 16, in <module>
        function_3(1)
      File "unbound_local_error.py", line 14, in function_3
        return 3 * function_2(x)
      File "unbound_local_error.py", line 10, in function_2
        return function_1(y + 1)
      File "unbound_local_error.py", line 7, in function_1
        a_1 = a_1 + a_2 + a
    UnboundLocalError: local variable 'a_1' referenced before assignment
    


Verbosity level 7
------------------------------
Same as level 4, except that some headers are not included.

.. code-block:: none


        UnboundLocalError: local variable 'a_1' referenced before assignment
        
        The variable that appears to cause the problem is `a_1`.
        Perhaps the statement
        
            global a_1
        
        should have been included as the first line inside your function.
        The similar name `'a_2'` was found in the local scope. 
        
       13: def function_3(x):
       14:     return 3 * function_2(x)
       15: 
    -->16: function_3(1)

            function_3: <function function_3>
        
        4: 
        5: def function_1(a):
        6:     a_2 = 4
    --> 7:     a_1 = a_1 + a_2 + a

            global a_1: 2
            a_2: 4
            a: 2
        


Verbosity level 8
------------------------------
Python traceback followed by a brief guess as to the likely cause.

.. code-block:: none


    Traceback (most recent call last):
      File "unbound_local_error.py", line 16, in <module>
        function_3(1)
      File "unbound_local_error.py", line 14, in function_3
        return 3 * function_2(x)
      File "unbound_local_error.py", line 10, in function_2
        return function_1(y + 1)
      File "unbound_local_error.py", line 7, in function_1
        a_1 = a_1 + a_2 + a
    UnboundLocalError: local variable 'a_1' referenced before assignment
    
        The variable that appears to cause the problem is `a_1`.
        Perhaps the statement
        
            global a_1
        
        should have been included as the first line inside your function.
        The similar name `'a_2'` was found in the local scope. 
        


Verbosity level 9
------------------------------
Only the Python traceback.

.. code-block:: none


    Traceback (most recent call last):
      File "unbound_local_error.py", line 16, in <module>
        function_3(1)
      File "unbound_local_error.py", line 14, in function_3
        return 3 * function_2(x)
      File "unbound_local_error.py", line 10, in function_2
        return function_1(y + 1)
      File "unbound_local_error.py", line 7, in function_1
        a_1 = a_1 + a_2 + a
    UnboundLocalError: local variable 'a_1' referenced before assignment
    


Verbosity level 0
------------------------------
For all other levels that include a Python traceback, any calls
to Friendly-traceback itself are removed.  This shows the
true Python traceback, including the calls to our own code.
This is available for debugging purpose.

.. code-block:: none


    Traceback (most recent call last):
      File "c:\users\andre\github\friendly-traceback\friendly_traceback\editors_helper.py", line 141, in exec_code
        exec(code, module_globals)
      File "unbound_local_error.py", line 16, in <module>
        function_3(1)
      File "unbound_local_error.py", line 14, in function_3
        return 3 * function_2(x)
      File "unbound_local_error.py", line 10, in function_2
        return function_1(y + 1)
      File "unbound_local_error.py", line 7, in function_1
        a_1 = a_1 + a_2 + a
    UnboundLocalError: local variable 'a_1' referenced before assignment
    
