what()
------

Imagine that you are a beginner. You write some code and are
suddenly confronted with the following:

.. image:: images/greet_what_1.png
   :scale: 60 %
   :alt: Screen capture of unbound local error


You see ``UnboundLocalError``, and have no idea what it might mean.
Rather than heading to StackOverflow to ask a question and have it
immediately closed as being a duplicate, you simply ask ``what()``
and Friendly-traceback tries to help you.

.. image:: images/greet_what_2.png
   :scale: 60 %
   :alt: Screen capture of explanation bout unbound local error


``what()`` only gives here some generic information about what an ``UnboundLocalError`` is.
Later, we'll see how Friendly-traceback can often give more useful
information regarding the exact cause of the exception, and how to fix it.

``what()`` can be useful even if an exception has not been raised.
In principle, you can get information about any exception by passing it as
an object::

    >>> what(IndexError)

    An IndexError occurs when you are try to get an item from a list, a tuple, or a similar
    object (sequence), by using an index which does not exists; typically, this is because
    the index you give is greater than the length of the sequence. Reminder: the first item
    of a sequence is at index 0.


Instead of using a known Exception object, we can pass its name as a string
if we prefer. We can even specify a language other than English ...
as long as it is French - hopefully, support for more languages will be added
by contributors::

    >>> what("IndentationError", lang='fr')

    Une exception de type IndentationError se produit lorsqu'une ligne de code n'est pas
    indentée (c'est-à-dire alignée verticalement avec les autres lignes) de la façon
    attendue.


.. todo:: Try to provide such generic information about **all** standard Python exceptions.


why()
-------

You are a beginner reading some code found in a tutorial on the web
and decide to try it out by copy-pasting it.

.. image:: images/why_1.png
   :scale: 60 %
   :alt: Screen capture of syntax error

So, this didn't work, but you'd like to find out why.

.. code-block:: python

    >>> why()

    Python indicates that you used some unicode characters not allowed as part
    of a variable name; this includes many emojis. However, I suspect that you
    used a fancy unicode quotation mark instead of a normal single or double
    quote for a string. This can happen if you copy-pasted code.

